In short, we all work in the lsub branch, and keep the master branch for google
version.

HOW TO INSTALL

	edit install.sh to reflect your paths
	run it

To see where you are
	git branch
	git status 
	git status | sed 's/modified:/git add/' | sed 's/deleted:/git rm -f/'
To see branches and tags at git.lsub.org
	git branch -r
To make sure you are up to date
	git checkout lsub
	git pull -v origin lsub

/usr/local/go (or any other local git cloned for a user)

	Create your clone using:
		cd /usr/local/go
		git clone git@git.lsub.org:Public/git/golang.git go
	Switch to the lsub branch and create it to track the one at git.lsub.org:
		git checkout lsub

	Now you have and *are* in the lsub branch. And you can use
		git pull -v
		git status
		git add -vv --all .
		git commit  -m 'cmd fixes and adds'
		git push -v

	If you have a change that's going to take a long time you might want
	to work in a new branch (eg, doselect)
		git checkout -b doselect
		git add files
		git commit -m 'doselect break and continue'
		git push origin doselect

	Then, others might
		git pull origin doselect
		git checkout doselect
		.. take a look or work and then get back to our std. branch
		git checkout lsub

	When you are done, you can merge back into lsub.
		git checkout lsub
		git pull origin doselect
		git merge doselect
		git push origin lsub
	You can now get rid of your local branch
		git branch -d doselect	# remove your local branch
	You can even remote it at git.lsub.org,
	but it's better to keep it there as a reference and also because others might be already using it.
		git push origin :doselect	# remove this branch at git.lsub.org



SHARED REPO AT /zx/sys/golang

The golang.git repo at git@git was created as a google fork:
	git clone -bare https://go.googlesource.com/go
The /zx clone is
	git clone git@git.lsub.org:Public/git/golang.git golang
	git remote add upstream https://go.googlesource.com/go

Next commands show how to work in it:

Fetch changes from google
	git fetch upstream

make sure you are in the local master branch
	git checkout master

merge changes from upstream's master
	git merge upstream/master

have fun with conflicts, you might just
	git checkout origin/master file
or
	git checkout upstream/master file
to opt for the origin or the upstream version of the file

Push resulting changes to lsub's master
	git push

NB: The lsub branch has a VERSION file, just remove it and use VERSION.cache
to update the lsub version after each merge.

LOCAL-REPOS FOR USERS

You might just
	git clone git@git.lsub.org:Public/git/golang.git golang

and use

git pull -v
git status
git add -vv --all .
git commit  -m 'cmd fixes and adds'
git push -v

INSTALLING GO 1.5

1. copy go 14 to /usr/local/go14 and build it within its own tree:
	cp -a /usr/local/go /usr/local/go14
	cd go14/src
	GOROOT=/usr/local/go14
	all.bash

2. build go 15.
	cd go/src
	rm /usr/local/go/src/runtime/zruntime_defs_darwin_amd64.go # so it gets generated
	GOROOT_BOOTSTRAP=/usr/local/go14
	all.bash

CHANGES MADE TO 1.4
git show-branch '--more=100' lsub

[lsub] guide
[lsub^] cclosed added
[lsub~2] tests
[lsub~3] guide
[lsub~4] goid and goappid for clive
[lsub~5] fix for lsub chansend when using the ret value
[lsub~6] fixes
[lsub~7] ok := c <- v is broken. fix noted
[lsub~8] lsub go fmt fix for struct
[lsub~9] fixes in tests and in gofmt for implicit structs
[lsub~10] struct optional only in the type decl. gofmt re-introduces it
[lsub~11] doselect parsing and fmt
[lsub~12] half done doselect for the go parser pkg
[lsub~13] leave oselsend as todo
[lsub~14] select send on closed is ok and does not panic
[lsub~15] get rid of tests broken by our changes to chans
[lsub~16] guide
[lsub~17] send arg must be addressable also in expr
[lsub~18] guide
[lsub~19] send returns an error; but ok := c <- true failing
[lsub~20] cerror added to the compiler and cclose panic on bad type fix
[lsub~21] close(c, err) added to the compiler
[lsub~22] Merge branch 'chanclose' of git.lsub.org:Public/git/golang into chanclose
[lsub~22^2] closechan2 and cerror added
[lsub~23] closechan2 and cerror added
[lsub~24] do not panic on closes
[lsub~25] mend
[lsub~26] struct optional in type and field decl
[lsub~27] guide
[lsub~28] guide
[lsub~29] doselect break and continue
[lsub~30] doselect added but for changes in break and continue
[lsub~31] initial change for doselect
[lsub~32] guide
