//line go.y:21
package gc

import __yyfmt__ "fmt"

//line go.y:21
import (
	"fmt"
	"strings"
)

//line go.y:28
type yySymType struct {
	yys  int
	node *Node
	list *NodeList
	typ  *Type
	sym  *Sym
	val  Val
	i    int
}

const LLITERAL = 57346
const LASOP = 57347
const LCOLAS = 57348
const LBREAK = 57349
const LCASE = 57350
const LCHAN = 57351
const LCONST = 57352
const LCONTINUE = 57353
const LDDD = 57354
const LDEFAULT = 57355
const LDEFER = 57356
const LELSE = 57357
const LFALL = 57358
const LFOR = 57359
const LFUNC = 57360
const LGO = 57361
const LGOTO = 57362
const LIF = 57363
const LIMPORT = 57364
const LINTERFACE = 57365
const LMAP = 57366
const LNAME = 57367
const LPACKAGE = 57368
const LRANGE = 57369
const LRETURN = 57370
const LSELECT = 57371
const LSTRUCT = 57372
const LSWITCH = 57373
const LTYPE = 57374
const LVAR = 57375
const LDOSELECT = 57376
const LANDAND = 57377
const LANDNOT = 57378
const LBODY = 57379
const LCOMM = 57380
const LDEC = 57381
const LEQ = 57382
const LGE = 57383
const LGT = 57384
const LIGNORE = 57385
const LINC = 57386
const LLE = 57387
const LLSH = 57388
const LLT = 57389
const LNE = 57390
const LOROR = 57391
const LRSH = 57392
const NotPackage = 57393
const NotParen = 57394
const PreferToRightParen = 57395

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LLITERAL",
	"LASOP",
	"LCOLAS",
	"LBREAK",
	"LCASE",
	"LCHAN",
	"LCONST",
	"LCONTINUE",
	"LDDD",
	"LDEFAULT",
	"LDEFER",
	"LELSE",
	"LFALL",
	"LFOR",
	"LFUNC",
	"LGO",
	"LGOTO",
	"LIF",
	"LIMPORT",
	"LINTERFACE",
	"LMAP",
	"LNAME",
	"LPACKAGE",
	"LRANGE",
	"LRETURN",
	"LSELECT",
	"LSTRUCT",
	"LSWITCH",
	"LTYPE",
	"LVAR",
	"LDOSELECT",
	"LANDAND",
	"LANDNOT",
	"LBODY",
	"LCOMM",
	"LDEC",
	"LEQ",
	"LGE",
	"LGT",
	"LIGNORE",
	"LINC",
	"LLE",
	"LLSH",
	"LLT",
	"LNE",
	"LOROR",
	"LRSH",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"NotPackage",
	"NotParen",
	"'('",
	"')'",
	"PreferToRightParen",
	"';'",
	"'.'",
	"'$'",
	"'='",
	"':'",
	"'{'",
	"'}'",
	"'!'",
	"'~'",
	"'['",
	"']'",
	"'?'",
	"'@'",
	"','",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line go.y:2396
func fixlbrace(lbr int) {
	// If the opening brace was an LBODY,
	// set up for another one now that we're done.
	// See comment in lex.C about loophack.
	if lbr == LBODY {
		loophack = 1
	}
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 17,
	1, 1,
	64, 23,
	-2, 0,
	-1, 49,
	6, 289,
	67, 289,
	77, 289,
	-2, 50,
	-1, 58,
	68, 159,
	-2, 168,
	-1, 76,
	61, 187,
	-2, 227,
	-1, 77,
	61, 188,
	-2, 189,
	-1, 123,
	61, 140,
	65, 140,
	69, 140,
	73, 140,
	-2, 279,
	-1, 127,
	61, 140,
	65, 140,
	69, 140,
	73, 140,
	-2, 280,
	-1, 179,
	2, 227,
	37, 227,
	61, 187,
	69, 227,
	-2, 179,
	-1, 180,
	37, 189,
	61, 188,
	69, 189,
	-2, 180,
	-1, 187,
	64, 263,
	70, 263,
	-2, 0,
	-1, 249,
	64, 263,
	70, 263,
	-2, 0,
	-1, 259,
	8, 263,
	13, 263,
	64, 263,
	70, 263,
	-2, 0,
	-1, 336,
	4, 248,
	64, 248,
	70, 248,
	-2, 163,
	-1, 421,
	37, 201,
	61, 201,
	69, 201,
	-2, 208,
	-1, 423,
	37, 182,
	61, 182,
	69, 182,
	-2, 173,
	-1, 424,
	37, 183,
	61, 183,
	69, 183,
	-2, 174,
	-1, 425,
	37, 184,
	61, 184,
	69, 184,
	-2, 175,
	-1, 426,
	37, 185,
	61, 185,
	69, 185,
	-2, 176,
	-1, 432,
	8, 263,
	13, 263,
	64, 263,
	70, 263,
	-2, 0,
	-1, 433,
	64, 263,
	70, 263,
	-2, 0,
	-1, 515,
	64, 263,
	70, 263,
	-2, 0,
	-1, 572,
	61, 163,
	-2, 331,
	-1, 573,
	61, 164,
	-2, 330,
	-1, 599,
	8, 263,
	13, 263,
	64, 263,
	70, 263,
	-2, 0,
	-1, 615,
	37, 186,
	61, 186,
	69, 186,
	-2, 177,
}

const yyNprod = 365
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 2409

var yyAct = [...]int{

	76, 633, 394, 313, 292, 504, 565, 413, 415, 300,
	569, 305, 189, 77, 495, 105, 234, 416, 235, 299,
	367, 329, 350, 474, 473, 252, 312, 343, 349, 387,
	402, 111, 103, 289, 255, 311, 482, 348, 483, 321,
	327, 253, 106, 87, 248, 177, 14, 110, 217, 293,
	476, 34, 496, 6, 200, 157, 231, 339, 484, 336,
	485, 536, 250, 335, 429, 386, 407, 224, 13, 607,
	179, 10, 676, 485, 11, 606, 461, 622, 561, 175,
	476, 195, 13, 180, 108, 213, 438, 319, 318, 333,
	462, 10, 398, 57, 196, 332, 203, 197, 477, 198,
	687, 10, 685, 657, 383, 656, 232, 475, 649, 12,
	13, 232, 432, 626, 232, 623, 331, 232, 643, 233,
	194, 12, 13, 590, 233, 110, 178, 233, 477, 184,
	233, 408, 208, 187, 556, 214, 210, 227, 443, 204,
	205, 12, 13, 209, 244, 547, 460, 219, 221, 223,
	317, 12, 13, 397, 166, 167, 168, 169, 170, 171,
	172, 173, 238, 157, 179, 432, 543, 297, 247, 648,
	647, 616, 218, 218, 218, 218, 80, 180, 304, 650,
	336, 432, 179, 524, 524, 126, 535, 502, 525, 525,
	85, 81, 10, 90, 232, 180, 310, 84, 524, 323,
	232, 464, 232, 525, 232, 237, 432, 233, 287, 463,
	333, 296, 431, 233, 10, 233, 332, 233, 419, 156,
	178, 34, 201, 249, 601, 328, 174, 307, 236, 163,
	12, 13, 412, 164, 241, 215, 90, 232, 178, 118,
	79, 165, 12, 13, 230, 651, 645, 188, 336, 185,
	233, 207, 378, 369, 92, 232, 345, 10, 232, 232,
	522, 232, 479, 366, 12, 13, 376, 364, 233, 341,
	380, 233, 233, 373, 233, 166, 173, 371, 333, 90,
	155, 186, 185, 34, 332, 384, 392, 450, 382, 389,
	157, 325, 351, 34, 351, 351, 388, 92, 12, 13,
	10, 93, 336, 179, 432, 632, 336, 12, 13, 423,
	10, 627, 409, 10, 186, 624, 180, 10, 430, 232,
	232, 391, 424, 393, 603, 425, 595, 426, 588, 406,
	578, 232, 233, 233, 440, 481, 88, 49, 342, 428,
	92, 637, 342, 480, 233, 681, 302, 338, 421, 116,
	12, 13, 12, 13, 243, 439, 12, 13, 459, 178,
	12, 13, 458, 12, 13, 451, 452, 12, 13, 10,
	404, 401, 396, 381, 377, 370, 232, 344, 102, 636,
	101, 470, 86, 20, 680, 131, 508, 232, 457, 233,
	679, 71, 678, 497, 670, 642, 469, 639, 630, 509,
	233, 629, 510, 489, 511, 112, 455, 176, 528, 179,
	501, 620, 512, 500, 619, 492, 618, 191, 531, 12,
	13, 232, 180, 615, 605, 534, 582, 559, 232, 551,
	539, 540, 351, 351, 233, 542, 533, 530, 532, 232,
	529, 233, 507, 351, 537, 514, 516, 513, 499, 445,
	448, 520, 233, 493, 527, 232, 491, 488, 456, 544,
	436, 385, 548, 306, 447, 178, 34, 34, 233, 545,
	261, 628, 202, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 131, 131, 284, 574, 202, 232, 579,
	449, 176, 202, 303, 581, 202, 584, 232, 202, 577,
	557, 233, 56, 591, 508, 508, 341, 558, 472, 593,
	233, 309, 587, 10, 454, 179, 365, 509, 509, 50,
	510, 510, 511, 511, 260, 351, 258, 351, 180, 573,
	183, 631, 447, 351, 600, 608, 351, 613, 614, 34,
	598, 594, 119, 359, 609, 120, 120, 602, 10, 128,
	239, 10, 351, 552, 395, 10, 554, 131, 72, 592,
	507, 507, 446, 12, 13, 526, 519, 130, 294, 131,
	549, 178, 7, 5, 447, 202, 216, 553, 24, 16,
	19, 202, 232, 202, 109, 202, 122, 347, 226, 362,
	363, 104, 675, 640, 497, 233, 471, 375, 12, 13,
	444, 12, 13, 123, 127, 12, 13, 580, 346, 212,
	654, 508, 59, 211, 655, 585, 660, 21, 202, 399,
	95, 662, 666, 34, 509, 646, 351, 510, 664, 511,
	176, 351, 259, 417, 314, 644, 202, 78, 417, 202,
	202, 179, 202, 652, 641, 667, 403, 351, 161, 160,
	531, 400, 26, 677, 180, 665, 159, 124, 124, 690,
	604, 508, 668, 315, 669, 405, 682, 507, 162, 686,
	688, 158, 515, 689, 509, 282, 283, 510, 290, 511,
	617, 28, 599, 433, 692, 691, 31, 351, 22, 15,
	202, 23, 573, 206, 18, 351, 3, 178, 125, 131,
	202, 202, 8, 4, 9, 2, 131, 334, 340, 1,
	466, 220, 202, 563, 564, 638, 58, 507, 91, 567,
	568, 634, 505, 192, 246, 131, 131, 465, 82, 107,
	107, 114, 117, 83, 453, 74, 176, 73, 486, 242,
	191, 121, 121, 351, 494, 121, 351, 658, 659, 372,
	334, 98, 225, 337, 663, 251, 673, 202, 653, 100,
	674, 379, 129, 96, 17, 414, 330, 202, 202, 25,
	256, 27, 36, 99, 97, 295, 38, 37, 136, 151,
	288, 154, 68, 137, 141, 142, 113, 91, 140, 152,
	139, 138, 135, 153, 143, 144, 145, 146, 147, 148,
	149, 150, 202, 107, 40, 39, 35, 94, 107, 202,
	358, 114, 286, 285, 75, 254, 222, 411, 115, 360,
	202, 610, 521, 523, 356, 354, 352, 89, 70, 0,
	560, 355, 562, 80, 571, 0, 202, 0, 575, 359,
	0, 576, 126, 0, 358, 596, 597, 85, 81, 10,
	0, 0, 176, 360, 84, 0, 357, 586, 356, 354,
	572, 0, 635, 301, 417, 355, 611, 417, 417, 0,
	0, 0, 0, 359, 353, 0, 228, 13, 0, 202,
	0, 240, 0, 0, 245, 69, 58, 0, 202, 0,
	357, 490, 0, 0, 0, 202, 202, 79, 498, 12,
	13, 0, 0, 121, 121, 151, 0, 0, 353, 0,
	12, 13, 0, 0, 0, 152, 0, 282, 283, 153,
	0, 0, 0, 368, 147, 148, 149, 150, 0, 107,
	0, 621, 0, 0, 0, 191, 625, 0, 0, 0,
	0, 0, 0, 334, 0, 550, 121, 0, 58, 0,
	0, 0, 0, 0, 0, 340, 0, 254, 58, 254,
	0, 0, 0, 0, 320, 0, 0, 0, 0, 0,
	322, 0, 324, 202, 326, 0, 671, 672, 176, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 661, 0, 0, 0, 0, 571, 136, 151,
	0, 154, 202, 137, 141, 142, 0, 374, 140, 152,
	139, 138, 135, 153, 143, 144, 145, 146, 147, 148,
	149, 150, 0, 0, 437, 0, 0, 0, 390, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	429, 80, 0, 91, 0, 0, 0, 0, 0, 0,
	126, 0, 202, 0, 0, 85, 81, 10, 0, 0,
	478, 0, 84, 0, 368, 0, 0, 0, 0, 107,
	237, 0, 0, 0, 0, 0, 107, 0, 0, 422,
	114, 0, 0, 0, 503, 254, 0, 201, 0, 434,
	435, 0, 0, 236, 0, 0, 0, 0, 0, 229,
	0, 441, 0, 0, 0, 79, 308, 12, 13, 230,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	85, 81, 10, 0, 0, 0, 0, 84, 0, 0,
	0, 58, 58, 0, 185, 237, 0, 0, 0, 121,
	0, 121, 0, 0, 0, 0, 422, 0, 0, 555,
	0, 121, 201, 254, 0, 0, 0, 0, 236, 0,
	0, 0, 566, 570, 0, 0, 186, 0, 0, 0,
	79, 368, 12, 13, 478, 0, 0, 0, 478, 0,
	0, 0, 0, 583, 368, 0, 0, 0, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 541, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 316, 546,
	70, 0, 0, 42, 58, 80, 48, 43, 0, 0,
	45, 0, 41, 51, 126, 44, 46, 55, 0, 85,
	81, 10, 151, 0, 47, 53, 84, 52, 32, 30,
	54, 0, 152, 0, 67, 0, 153, 143, 144, 145,
	146, 147, 148, 149, 150, 0, 0, 62, 63, 0,
	66, 60, 0, 0, 61, 0, 0, 69, 589, 0,
	0, 0, 0, 0, 0, 317, 0, 64, 65, 79,
	0, 12, 13, 0, 0, 0, 0, 107, 0, 0,
	254, 0, 0, 0, 0, 0, 136, 151, 58, 154,
	0, 137, 141, 142, 0, 0, 140, 152, 139, 138,
	135, 153, 143, 144, 145, 146, 147, 148, 149, 150,
	0, 0, 0, 566, 0, 0, 570, 368, 0, 684,
	478, 0, 0, 29, 368, 70, 368, 0, 42, 0,
	80, 48, 43, 0, 0, 45, 0, 41, 51, 33,
	44, 46, 55, 0, 85, 81, 10, 0, 0, 47,
	53, 84, 52, 32, 30, 54, 0, 0, 0, 67,
	0, 0, 0, 0, 70, 0, 0, 0, 0, 80,
	0, 0, 62, 63, 0, 66, 60, 0, 126, 61,
	0, 0, 69, 85, 81, 10, 0, 0, 0, 0,
	84, 0, 64, 65, 79, 0, 12, 13, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 63, 0, 66, 60, 0, 0, 61, 0,
	70, 69, 0, 0, 0, 80, 0, 0, 0, 418,
	0, 64, 65, 79, 126, 12, 13, 0, 0, 85,
	81, 10, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 63, 0,
	66, 60, 0, 0, 61, 0, 70, 69, 0, 0,
	0, 80, 0, 0, 0, 612, 0, 64, 65, 79,
	126, 12, 13, 0, 0, 85, 81, 10, 0, 518,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	80, 0, 0, 62, 63, 0, 66, 60, 0, 126,
	61, 0, 0, 69, 85, 81, 10, 0, 517, 0,
	0, 84, 0, 64, 65, 79, 0, 12, 13, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 63, 0, 66, 60, 0, 0, 61,
	0, 70, 69, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 64, 65, 79, 126, 12, 13, 0, 0,
	85, 81, 10, 0, 0, 0, 0, 84, 0, 410,
	0, 0, 0, 0, 0, 182, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 80, 0, 0, 62, 63,
	0, 66, 181, 0, 126, 61, 0, 0, 69, 85,
	81, 10, 0, 0, 0, 0, 84, 0, 64, 65,
	79, 0, 12, 13, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 63, 0,
	66, 181, 0, 0, 61, 0, 70, 69, 298, 0,
	0, 80, 0, 0, 0, 0, 0, 64, 65, 79,
	126, 12, 13, 0, 0, 85, 81, 10, 0, 291,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 62, 63, 80, 66, 60, 190, 0,
	61, 0, 0, 69, 126, 0, 0, 0, 0, 85,
	81, 10, 0, 64, 65, 79, 84, 12, 13, 0,
	0, 0, 0, 0, 67, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 80, 0, 0, 62, 63, 0,
	66, 60, 0, 126, 61, 0, 0, 69, 85, 81,
	10, 0, 0, 0, 0, 84, 0, 64, 65, 79,
	0, 12, 13, 67, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 80, 0, 0, 62, 63, 0, 66,
	60, 0, 126, 61, 0, 0, 69, 85, 81, 10,
	0, 0, 0, 0, 84, 0, 64, 65, 79, 0,
	12, 13, 182, 0, 0, 0, 0, 70, 0, 0,
	0, 0, 308, 0, 0, 62, 63, 0, 66, 181,
	0, 126, 61, 0, 0, 69, 85, 81, 10, 0,
	0, 0, 0, 84, 0, 64, 65, 79, 0, 12,
	13, 67, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 63, 80, 66, 60, 0,
	0, 61, 0, 0, 69, 126, 0, 0, 0, 0,
	85, 81, 10, 0, 64, 65, 79, 84, 12, 13,
	80, 0, 0, 0, 185, 237, 0, 0, 0, 126,
	80, 0, 0, 0, 85, 81, 10, 0, 0, 126,
	0, 84, 201, 0, 85, 81, 10, 0, 236, 237,
	0, 84, 0, 0, 0, 0, 186, 0, 185, 420,
	79, 0, 12, 13, 80, 0, 201, 0, 0, 0,
	0, 0, 236, 126, 0, 0, 201, 0, 85, 81,
	10, 0, 427, 0, 79, 84, 12, 13, 442, 0,
	186, 0, 185, 193, 79, 0, 12, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 0, 0, 79, 0,
	12, 13, 136, 151, 0, 154, 0, 137, 141, 142,
	0, 0, 140, 152, 139, 138, 135, 153, 143, 144,
	145, 146, 147, 148, 149, 150, 0, 80, 0, 0,
	257, 0, 0, 0, 0, 683, 126, 0, 0, 0,
	0, 85, 81, 10, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 151, 0, 0, 0,
	137, 141, 142, 201, 0, 140, 152, 139, 138, 236,
	153, 143, 144, 145, 146, 147, 148, 149, 150, 0,
	0, 79, 0, 12, 13, 136, 151, 0, 154, 0,
	137, 141, 142, 0, 0, 140, 152, 139, 138, 135,
	153, 143, 144, 145, 146, 147, 148, 149, 150, 0,
	80, 0, 0, 0, 80, 0, 0, 0, 538, 126,
	0, 0, 0, 126, 85, 81, 10, 0, 85, 81,
	10, 84, 0, 0, 0, 84, 0, 0, 358, 237,
	0, 487, 0, 237, 0, 0, 0, 360, 0, 0,
	0, 0, 356, 354, 352, 0, 201, 0, 0, 355,
	201, 0, 506, 0, 0, 0, 236, 359, 0, 0,
	0, 0, 0, 0, 79, 0, 12, 13, 79, 358,
	12, 13, 0, 358, 357, 0, 0, 0, 360, 0,
	0, 0, 360, 356, 354, 352, 0, 356, 354, 352,
	355, 0, 353, 0, 355, 13, 358, 0, 468, 0,
	0, 0, 359, 0, 0, 360, 0, 0, 0, 0,
	356, 354, 352, 0, 0, 357, 0, 355, 0, 357,
	0, 467, 0, 0, 0, 359, 0, 0, 0, 0,
	0, 361, 0, 353, 132, 0, 13, 353, 0, 0,
	13, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 0, 0, 13, 136, 151, 0, 154, 134, 137,
	141, 142, 0, 133, 140, 152, 139, 138, 135, 153,
	143, 144, 145, 146, 147, 148, 149, 150, 136, 151,
	0, 154, 0, 137, 141, 142, 0, 0, 140, 152,
	139, 138, 135, 153, 143, 144, 145, 146, 147, 148,
	149, 150, 136, 151, 0, 0, 0, 137, 141, 142,
	0, 0, 140, 152, 139, 138, 135, 153, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 0, 0, 0,
	137, 141, 142, 0, 0, 140, 152, 139, 138, 0,
	153, 143, 144, 145, 146, 147, 148, 149, 150,
}
var yyPact = [...]int{

	-1000, -1000, 557, 556, -1000, 66, -1000, 564, 568, 319,
	-1000, -1000, -1000, 623, -1000, -1000, 563, 1341, 318, 275,
	-1000, 236, 751, 316, -1000, 314, -1000, -1000, -1000, -1000,
	540, 533, 344, 288, -1000, -1000, -1000, -1000, -1000, -1000,
	171, -1000, 66, 66, 834, 834, 66, 1765, -1000, 2279,
	213, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 168,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 157, 1804,
	-1000, -1000, -1000, 479, 212, -1000, -1000, -1000, 245, 1726,
	1955, 23, -1000, -1000, 212, 212, -1000, -1000, 189, 556,
	-1000, 619, 615, 60, 169, -1000, 561, -8, -8, -8,
	6, -1000, -1000, -1000, 536, 1042, -1000, -1000, -1000, 498,
	167, -1000, 292, 1887, -1000, 154, 2048, 475, -1000, -1000,
	-1000, -1000, -1000, -1000, 168, -1000, 473, -1000, -1000, -1000,
	-22, 2303, 1765, -1000, -1000, 1765, 1765, 1765, 1765, 1765,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765,
	1765, 1765, 1765, 1765, 1765, 1765, 1765, 1765, 1682, 1765,
	541, 1765, 1765, 1626, 285, 1765, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 401, 2303, -1000, -1000, -1000,
	-1000, 1804, 1843, 1765, -1000, -1000, -1000, 1216, -1000, 14,
	13, 2303, -1000, 1887, -1000, -1000, -1000, -1000, -1000, 2145,
	129, 2145, 226, 2145, 155, 277, 313, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 614, 2237, -1000, 2214,
	2237, -1000, 154, 465, 66, 311, -1000, -1000, 210, 1765,
	66, -1000, -1000, -1000, -1000, -1000, 2145, 598, 310, -1000,
	185, 1765, 309, -1000, -1000, -1000, -1000, 34, -1000, 1216,
	399, -12, -1000, -1000, 2048, -1000, -1000, 2145, 2048, 1216,
	2048, 2303, 2060, 2350, 1206, 1206, 1206, 1206, 1206, 1206,
	879, 879, 879, 879, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2327, -22, -22, 2303, -1000, 527, 308, -1000, -1000,
	86, 1765, -1000, 307, -1000, -1000, 306, -1000, -1000, 54,
	-1000, -1000, 1587, 753, 164, 1380, 149, -1000, 1921, 973,
	1380, 142, -1000, -1000, -1000, -1000, -1000, -1000, 2145, 2145,
	-1000, -1000, 398, -1000, -1000, 66, 12, 270, -1000, -1000,
	1911, 606, 517, 439, -1000, -1000, 222, 302, -1000, -1000,
	463, -1000, 559, 396, 232, -1000, 298, 294, -1000, -1000,
	-1000, -1000, -1000, 72, 17, 140, 132, 2237, 2210, 597,
	457, 46, 195, 279, 271, 66, -4, -1000, 2169, 395,
	66, 1765, -22, -1000, 394, 1887, 391, 66, 1765, -22,
	386, 66, 270, -1000, 117, 2141, 2048, -1000, -1000, -1000,
	-1000, 385, -1000, 383, -1000, -1000, 1765, 1531, 1492, 2303,
	539, 1765, 190, 538, 1765, 527, 378, -13, 1804, 376,
	374, -1000, 1765, 116, -16, -1000, -1000, 2090, -1000, -1000,
	1107, -1000, -1000, -1000, -1000, -1000, -1000, 2145, 373, -1000,
	96, -1000, 1216, 1216, -1000, -1000, -1000, -1000, 2145, 75,
	223, 606, 66, -1000, -1000, 367, 559, 222, 606, 559,
	66, 64, 281, -1000, 2048, 365, -1000, -1000, -1000, -1000,
	2237, 4, 2237, 66, 845, -1000, -1000, 515, 2237, -1000,
	-1000, 2237, 66, 266, -1000, 76, -1000, 613, -1000, 46,
	-1000, -1000, 364, -17, 66, 66, 606, 2237, -1000, -1000,
	-22, -1000, -1000, -1000, 264, -1000, -1000, 167, -22, -1000,
	-1000, 53, -1000, 452, -1000, -1000, 2048, -1000, -1000, -1000,
	-1000, -1000, -1000, 2141, 2141, 1216, 262, 1765, 1765, -1000,
	-1000, -1000, -1000, -1000, 1804, 156, -1000, 260, -1000, -1000,
	362, -1000, -1000, -1000, 1, -1000, 1380, -1000, 1436, 1380,
	1380, 361, -1000, -1000, -1000, 101, -1000, -1000, -1000, -1000,
	-1000, 606, 354, -1000, 352, -1000, -1000, -1000, 349, -1000,
	-1000, 2237, 3, 45, 251, -1000, 2237, 43, 247, -1000,
	410, -1000, -1000, -1000, 339, -1000, -1000, 336, -1000, 490,
	-1000, 241, 811, 280, -1000, -1000, 606, 335, 66, 185,
	-1000, 2048, 333, -1000, 48, 1765, 2303, 2303, 176, 1216,
	102, -1000, 175, 1765, -1000, -1000, -1000, 1765, -1000, -1000,
	-1000, 2303, -1000, 35, 33, -1000, -1000, -1000, 606, 606,
	2141, -1000, 2237, -1000, 66, 606, -1000, 845, 66, -1000,
	811, 76, -1000, -1000, -1000, 66, -1000, 66, -1000, -1000,
	-1000, 332, -1000, -1000, -1000, -1000, 240, -1000, 1765, 1765,
	1804, -1000, -1000, 587, -2, 1380, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 330, -1000, 328, 322, 283,
	2141, 1997, 1271, -1000, -1000, 81, -1000, 30, 811, -1000,
	-1000, 811, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1765, 527, -1000,
}
var yyPgo = [...]int{

	0, 54, 837, 708, 63, 138, 26, 780, 25, 833,
	832, 3, 18, 116, 337, 831, 17, 9, 828, 826,
	824, 823, 822, 816, 4, 815, 673, 57, 8, 814,
	391, 41, 45, 512, 42, 12, 796, 552, 49, 622,
	792, 568, 790, 787, 786, 785, 33, 782, 93, 781,
	31, 11, 779, 44, 5, 2, 15, 776, 529, 775,
	7, 19, 774, 772, 30, 770, 768, 766, 35, 62,
	765, 763, 32, 762, 21, 40, 644, 52, 14, 754,
	749, 747, 745, 34, 744, 743, 738, 16, 734, 39,
	56, 733, 13, 732, 0, 74, 48, 24, 23, 20,
	10, 6, 731, 1, 38, 36, 730, 729, 724, 723,
	379, 37, 721, 22, 28, 720, 719, 715, 713, 712,
	706, 53, 46, 704, 43, 703, 27, 701, 699, 698,
	696, 693, 692, 682, 681, 678, 675, 670, 669, 666,
	661, 659, 658, 656, 29, 647, 642, 630,
}
var yyR1 = [...]int{

	0, 116, 118, 118, 120, 117, 119, 119, 123, 123,
	123, 124, 124, 125, 125, 2, 2, 2, 121, 127,
	127, 128, 122, 52, 52, 52, 52, 52, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 130, 72,
	72, 72, 77, 77, 78, 78, 78, 36, 50, 50,
	46, 46, 46, 46, 46, 46, 9, 9, 9, 9,
	131, 11, 132, 10, 64, 64, 133, 55, 42, 42,
	42, 22, 22, 22, 21, 134, 23, 24, 24, 135,
	136, 137, 25, 138, 65, 66, 66, 67, 67, 139,
	140, 47, 141, 43, 45, 45, 142, 143, 44, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	48, 48, 48, 48, 48, 48, 48, 48, 48, 41,
	41, 41, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 51, 28, 16, 16,
	15, 15, 39, 39, 17, 17, 31, 1, 1, 33,
	34, 37, 37, 3, 3, 3, 95, 95, 30, 29,
	83, 83, 7, 7, 7, 7, 7, 7, 32, 32,
	32, 32, 91, 91, 91, 91, 91, 81, 81, 82,
	93, 93, 93, 93, 93, 12, 12, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 87, 90, 90, 86,
	86, 88, 88, 85, 85, 89, 49, 18, 18, 19,
	19, 94, 53, 53, 54, 54, 54, 145, 20, 20,
	62, 62, 73, 73, 79, 79, 80, 80, 75, 75,
	71, 71, 74, 74, 74, 74, 74, 74, 4, 4,
	13, 27, 27, 27, 84, 8, 8, 8, 8, 70,
	70, 69, 69, 6, 6, 6, 6, 6, 26, 26,
	26, 26, 26, 26, 146, 26, 26, 26, 26, 26,
	26, 26, 26, 68, 68, 57, 57, 56, 56, 58,
	58, 61, 61, 59, 59, 59, 59, 60, 60, 126,
	126, 144, 144, 35, 35, 63, 63, 38, 38, 105,
	105, 109, 109, 107, 107, 5, 5, 147, 147, 147,
	147, 147, 147, 96, 112, 110, 110, 110, 115, 115,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 114, 113, 99, 99, 101, 100, 100, 103, 103,
	102, 102, 98, 98, 98, 97, 97, 129, 129, 104,
	104, 108, 108, 106, 106,
}
var yyR2 = [...]int{

	0, 4, 0, 3, 0, 3, 0, 3, 2, 5,
	3, 3, 2, 1, 3, 1, 2, 2, 4, 0,
	1, 0, 4, 0, 1, 1, 1, 1, 2, 5,
	3, 2, 5, 7, 3, 2, 5, 3, 1, 2,
	4, 3, 4, 3, 1, 2, 1, 1, 2, 2,
	1, 3, 3, 3, 2, 2, 3, 5, 5, 2,
	0, 4, 0, 3, 0, 2, 0, 4, 4, 4,
	2, 5, 1, 1, 2, 0, 3, 1, 3, 0,
	0, 0, 8, 0, 5, 0, 2, 0, 2, 0,
	0, 7, 0, 5, 5, 1, 0, 0, 7, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	5, 6, 1, 1, 3, 5, 5, 4, 6, 8,
	1, 5, 5, 5, 7, 1, 0, 3, 1, 4,
	1, 4, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 4, 4, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 4, 4, 2,
	3, 2, 3, 5, 1, 1, 2, 3, 3, 5,
	3, 4, 2, 5, 3, 2, 3, 5, 8, 5,
	8, 5, 0, 3, 0, 1, 3, 1, 4, 2,
	0, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 3, 2, 4, 3, 5, 5, 1, 3,
	1, 2, 1, 3, 4, 1, 2, 2, 1, 1,
	3, 0, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 1, 2, 2, 2,
	2, 2, 2, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 1, 3, 3, 0, 2, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 4, 4, 5,
	6, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 5, 4, 4, 2, 2, 4,
	3, 3, 5, 3, 4, 3, 5, 1, 0, 1,
	3, 1, 1, 2, 1, 1, 5, 0, 2, 1,
	3, 1, 3, 1, 3,
}
var yyChk = [...]int{

	-1000, -116, -117, -120, -118, 26, -121, 26, -119, -3,
	25, -95, 75, 76, -122, -128, 25, -62, -123, 22,
	64, 4, -129, -127, 25, -52, -76, -49, -26, 2,
	33, -130, 32, 18, -46, -23, -47, -43, -44, -25,
	-29, 16, 7, 11, 19, 14, 20, 28, 10, -14,
	-58, 17, 31, 29, 34, 21, -33, -48, -3, -39,
	55, 58, 51, 52, 71, 72, 54, 38, -40, 61,
	4, -30, -41, -81, -82, -20, -94, -92, -145, 73,
	9, 24, -86, -85, 30, 23, 64, -124, 61, -2,
	4, -3, 65, 65, 66, -147, 22, 33, 10, 32,
	18, 64, 64, -72, 61, -56, -34, -3, -77, 61,
	-56, -50, 61, -36, -3, -18, 61, -3, 68, -37,
	-33, -3, -37, -41, -39, -3, 18, -41, -33, -63,
	-58, -14, 5, 44, 39, 49, 35, 40, 48, 47,
	45, 41, 42, 51, 52, 53, 54, 55, 56, 57,
	58, 36, 46, 50, 38, 67, 6, 77, -134, -139,
	-141, -142, -135, 61, 65, 73, -48, -48, -48, -48,
	-48, -48, -48, -48, 69, -17, -14, -32, -90, -94,
	-92, 55, 38, 61, -1, 37, 69, -1, 2, -35,
	12, -14, -91, 38, -89, -94, -92, -87, -12, 61,
	-1, 55, -30, 73, -1, -1, -125, 62, -124, -121,
	-122, 4, 4, 25, 75, 66, 25, -96, -95, -96,
	-112, -96, -19, -96, 61, -73, 62, -72, -7, 67,
	77, -90, -94, -92, -87, -12, 61, 38, -77, 62,
	-7, 67, -80, 62, -50, -7, -88, -1, -53, 69,
	-69, -70, -8, -31, -3, -83, -7, 12, 61, -146,
	61, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -58, -58, -14, -21, -22, -38, -42, -46,
	-58, 27, -24, -38, 37, -45, -38, -24, 62, -61,
	-17, -3, 61, -14, -35, -51, 62, -32, 9, -14,
	-51, -68, -6, -11, -76, -26, 2, 69, 74, 74,
	-7, -89, -7, 70, -7, 65, -7, -75, 70, -74,
	-57, -13, 61, 55, -33, -4, 25, -71, 70, -27,
	-33, -4, 61, -126, 64, -122, 4, -110, -111, -114,
	-113, -95, 25, 73, 24, 30, 23, 55, 9, 38,
	18, 67, -110, -110, -53, 61, -104, -99, -3, -126,
	64, 67, -58, -34, -7, 9, -126, 64, 67, -58,
	-126, 64, -75, 70, -68, 62, 77, -144, -31, -83,
	-7, -69, -6, -69, -55, 37, 64, 67, 6, -14,
	-140, 64, -64, -143, 64, -136, -144, 12, 77, -17,
	32, 74, 68, -60, -59, -28, -16, -14, 69, 69,
	38, -89, -7, -94, -92, -87, -12, 61, -144, 77,
	-60, 70, 64, -131, -7, -7, 62, -3, 74, -126,
	64, -7, 77, -5, 4, -13, 55, 25, -13, 61,
	65, -126, 64, -84, 61, -4, 62, -124, 64, 64,
	74, 4, 73, 69, 69, -110, -115, 61, 38, -111,
	-113, 9, 61, -97, -98, 61, 4, 52, -3, 67,
	64, 64, -105, -104, 62, 77, -110, 12, 62, -72,
	-58, 62, -89, 62, -79, -78, -77, -56, -58, 62,
	-50, -126, 70, -3, -54, -93, 61, -90, -94, -92,
	-87, -12, -8, 62, 62, -133, -38, 27, 27, 37,
	-38, -10, 70, -9, 8, 13, 37, -38, -55, 62,
	-144, -17, 62, 62, -35, 70, 77, -144, 68, -51,
	-51, -7, 62, 70, -6, -68, -7, 70, -74, -5,
	-33, 62, -13, -5, -13, -3, 70, -27, -69, 62,
	-110, 74, -110, -109, -108, -101, -3, -107, -106, -100,
	-3, -110, 25, -95, -114, -110, -110, -105, 64, -98,
	4, -97, 62, -3, -99, -5, -110, -126, 64, -7,
	70, 61, -69, -54, -68, 64, -14, -14, -64, -132,
	-61, 68, -64, 64, -137, 62, 74, 68, -28, -16,
	-15, -14, 69, -60, -60, 62, 70, -5, 62, 62,
	62, -110, 74, 70, 64, -110, 70, 64, 61, 62,
	62, 51, 64, -103, -102, 61, -110, 61, -5, 62,
	-78, -69, 62, 70, -38, 70, -68, 68, 67, 6,
	77, 70, -38, -66, -35, -51, 70, 70, -5, -5,
	-54, -110, -101, -5, -100, -105, -103, -98, -105, -105,
	62, -14, -14, -67, -65, 15, 74, -60, 62, 62,
	62, 62, -54, 68, 68, 21, -11, 70, -103, -103,
	-138, -24, -55,
}
var yyDef = [...]int{

	4, -2, 2, 0, 6, 0, 21, 0, 230, 0,
	163, 164, 165, 0, 5, 357, 19, -2, 0, 0,
	3, 0, 0, 0, 20, 0, 24, 25, 26, 27,
	0, 0, 0, 0, 268, 269, 270, 271, 272, 273,
	0, 276, 161, 161, 0, 0, 0, 305, 38, -2,
	0, 75, 89, 92, 96, 79, 169, 99, -2, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 152, 0,
	132, 133, 140, 0, 0, 145, -2, -2, 0, 303,
	0, 0, 204, 205, 0, 0, 7, 8, 0, 21,
	15, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	0, 18, 231, 28, 0, 0, 287, 160, 31, 0,
	0, 35, 0, 0, 47, 222, 261, 0, 274, 277,
	162, 159, 278, -2, 0, 168, 0, -2, 281, 282,
	306, 289, 0, 54, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 307, 307,
	0, 307, 307, 0, 0, 303, 121, 122, 123, 124,
	125, 126, 127, 128, 146, 0, 154, 155, 178, -2,
	-2, 0, 0, 0, 146, 157, 158, -2, 229, 0,
	0, 304, 199, 0, 201, 182, 183, 184, 185, 0,
	0, 0, 195, 0, 0, 0, 299, 10, 13, 21,
	12, 16, 17, 166, 167, 22, 0, 0, 323, 0,
	0, 324, 222, 0, 0, 299, 30, 232, 39, 0,
	0, 172, 173, 174, 175, 176, 0, 0, 299, 34,
	0, 0, 299, 37, 236, 48, 49, 0, 216, -2,
	0, 301, 259, 255, 168, 258, 156, 170, 261, -2,
	261, 51, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 52, 53, 290, 76, 0, 72, 73, 308,
	0, 0, 90, 77, 64, 97, 95, 80, 129, 301,
	291, 134, 0, 304, 0, 297, 153, 181, 0, 301,
	297, 0, 283, 264, 265, 266, 267, 60, 0, 0,
	200, 202, 0, 215, 206, 0, 0, 299, 210, 238,
	0, 315, 0, 0, 285, 250, -2, 299, 214, 240,
	0, 252, 0, 0, 300, 11, 0, 0, 325, 326,
	327, 330, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 359, 0, 0,
	300, 0, 41, 288, 0, 0, 0, 300, 0, 43,
	0, 300, 299, 212, 0, 224, 302, 262, 256, 257,
	171, 0, 275, 0, 74, 66, 307, 0, 0, 70,
	0, 307, 0, 0, 307, 0, 0, 301, 302, 0,
	0, 137, 303, 0, 301, 293, 294, 148, 146, 146,
	0, -2, 207, -2, -2, -2, -2, 0, 0, 302,
	0, 228, -2, -2, 197, 198, 186, 196, 0, 0,
	300, 315, 0, 243, 316, 0, 0, 248, 315, 0,
	0, 0, 300, 251, 261, 0, 9, 14, 317, 318,
	0, 0, 0, 311, 313, 337, 338, 0, 0, 328,
	329, 0, 309, 0, 355, 0, 352, 0, 354, 0,
	321, 322, 0, 310, 0, 0, 315, 0, 29, 233,
	40, 177, 208, 32, 299, 234, 44, 46, 42, 36,
	237, 0, 223, 168, 221, 225, 261, 190, 191, 192,
	193, 194, 260, 224, 224, -2, 0, 0, 0, 64,
	78, 65, 93, 62, 0, 0, 64, 0, 81, 130,
	0, 292, 135, 136, 0, 143, 302, 298, 0, 297,
	297, 0, 141, 142, 284, 0, 203, 209, 239, 242,
	286, 315, 0, 245, 0, 249, 213, 241, 0, 253,
	332, 0, 0, 0, 312, 361, 0, 0, 314, 363,
	0, 347, -2, -2, 0, 340, 341, 0, 319, 0,
	353, 0, 348, 0, 360, 343, 315, 0, 300, 45,
	211, 261, 0, 217, 0, 307, 68, 69, 0, -2,
	0, 59, 0, 307, 85, 131, 138, 303, 295, 296,
	147, 150, 146, 0, 0, -2, 61, 244, 315, 315,
	224, 333, 0, 335, 0, 315, 336, 0, 309, 339,
	348, 0, 320, 219, 349, 309, 351, 309, 344, 33,
	235, 0, 226, 67, 71, 91, 63, 56, 0, 0,
	0, 98, 94, 87, 0, 297, 149, 144, 246, 247,
	254, 334, 362, 345, 364, 0, 342, 0, 0, 0,
	224, 0, 0, 82, 86, 0, 139, 0, 348, 356,
	350, 348, 218, 57, 58, 83, 88, 151, 346, 220,
	307, 0, 84,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 3, 3, 66, 57, 58, 3,
	61, 62, 55, 51, 77, 52, 65, 56, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 68, 64,
	3, 67, 3, 75, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 73, 3, 74, 54, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 53, 70, 72,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 59,
	60, 63,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
	{343, 77, "unexpected comma during import block"},
	{91, 64, "missing import path; require quoted string"},
	{405, 64, "missing { after if clause"},
	{400, 64, "missing { after switch clause"},
	{286, 64, "missing { after for clause"},
	{516, 37, "missing { after for clause"},
	{17, 69, "unexpected semicolon or newline before {"},
	{113, 64, "unexpected semicolon or newline in type declaration"},
	{80, 70, "unexpected } in channel type"},
	{80, 62, "unexpected ) in channel type"},
	{80, 77, "unexpected comma in channel type"},
	{432, 15, "unexpected semicolon or newline before else"},
	{340, 77, "name list not allowed in interface type"},
	{286, 33, "var declaration not allowed in for initializer"},
	{25, 69, "unexpected { at end of statement"},
	{384, 69, "unexpected { at end of statement"},
	{124, 64, "argument to go/defer must be function call"},
	{413, 64, "need trailing comma before newline in composite literal"},
	{430, 64, "need trailing comma before newline in composite literal"},
	{126, 25, "nested func not allowed"},
	{675, 64, "else must be followed by if or statement block"},
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lookahead func() int
}

func (p *yyParserImpl) Lookahead() int {
	return p.lookahead()
}

func yyNewParser() yyParser {
	p := &yyParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	var yyDollar []yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yytoken := -1 // yychar translated into internal numbering
	yyrcvr.lookahead = func() int { return yychar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yychar = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar, yytoken = yylex1(yylex, &yylval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yychar = -1
		yytoken = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar, yytoken = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yychar = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:190
		{
			xtop = concat(xtop, yyDollar[4].list)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:196
		{
			prevlineno = lineno
			Yyerror("package statement must be first")
			errorexit()
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:202
		{
			mkpackage(yyDollar[2].sym.Name)
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:212
		{
			importpkg = Runtimepkg

			if Debug['A'] != 0 {
				cannedimports("runtime.Builtin", "package runtime\n\n$$\n\n")
			} else {
				cannedimports("runtime.Builtin", runtimeimport)
			}
			curio.importsafe = true
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:224
		{
			importpkg = nil
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:238
		{
			ipkg := importpkg
			my := importmyname
			importpkg = nil
			importmyname = nil

			if my == nil {
				my = Lookup(ipkg.Name)
			}

			pack := Nod(OPACK, nil, nil)
			pack.Sym = my
			pack.Pkg = ipkg
			pack.Lineno = int32(yyDollar[1].i)

			if strings.HasPrefix(my.Name, ".") {
				importdot(ipkg, pack)
				break
			}
			if my.Name == "init" {
				Yyerror("cannot import package as init - init must be a func")
				break
			}
			if my.Name == "_" {
				break
			}
			if my.Def != nil {
				lineno = int32(yyDollar[1].i)
				redeclare(my, "as imported package name")
			}
			my.Def = pack
			my.Lastlineno = int32(yyDollar[1].i)
			my.Block = 1 // at top level
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:273
		{
			// When an invalid import path is passed to importfile,
			// it calls Yyerror and then sets up a fake import with
			// no package statement. This allows us to test more
			// than one invalid import statement in a single file.
			if nerrors == 0 {
				Fatal("phase error in import")
			}
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:289
		{
			// import with original name
			yyVAL.i = parserline()
			importmyname = nil
			importfile(&yyDollar[1].val, yyVAL.i)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:296
		{
			// import with given name
			yyVAL.i = parserline()
			importmyname = yyDollar[1].sym
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:303
		{
			// import into my name space
			yyVAL.i = parserline()
			importmyname = Lookup(".")
			importfile(&yyDollar[2].val, yyVAL.i)
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:312
		{
			if importpkg.Name == "" {
				importpkg.Name = yyDollar[2].sym.Name
				numImport[yyDollar[2].sym.Name]++
			} else if importpkg.Name != yyDollar[2].sym.Name {
				Yyerror("conflicting names %s and %s for package %q", importpkg.Name, yyDollar[2].sym.Name, importpkg.Path)
			}
			importpkg.Direct = 1
			importpkg.Safe = curio.importsafe

			if safemode != 0 && !curio.importsafe {
				Yyerror("cannot import unsafe package %q", importpkg.Path)
			}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:329
		{
			if yyDollar[1].sym.Name == "safe" {
				curio.importsafe = true
			}
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:336
		{
			defercheckwidth()
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:340
		{
			resumecheckwidth()
			unimportfile()
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:349
		{
			Yyerror("empty top-level declaration")
			yyVAL.list = nil
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:355
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:359
		{
			Yyerror("non-declaration statement outside function body")
			yyVAL.list = nil
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:364
		{
			yyVAL.list = nil
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:370
		{
			yyVAL.list = yyDollar[2].list
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:374
		{
			yyVAL.list = yyDollar[3].list
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:378
		{
			yyVAL.list = nil
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:382
		{
			yyVAL.list = yyDollar[2].list
			iota_ = -100000
			lastconst = nil
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:388
		{
			yyVAL.list = yyDollar[3].list
			iota_ = -100000
			lastconst = nil
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:394
		{
			yyVAL.list = concat(yyDollar[3].list, yyDollar[5].list)
			iota_ = -100000
			lastconst = nil
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:400
		{
			yyVAL.list = nil
			iota_ = -100000
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:405
		{
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:409
		{
			yyVAL.list = yyDollar[3].list
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:413
		{
			yyVAL.list = nil
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:419
		{
			iota_ = 0
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:425
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:429
		{
			yyVAL.list = variter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:433
		{
			yyVAL.list = variter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:439
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, yyDollar[4].list)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:443
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, yyDollar[3].list)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:450
		{
			yyVAL.list = constiter(yyDollar[1].list, yyDollar[2].node, nil)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:454
		{
			yyVAL.list = constiter(yyDollar[1].list, nil, nil)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:460
		{
			// different from dclname because the name
			// becomes visible right here, not at the end
			// of the declaration.
			yyVAL.node = typedcl0(yyDollar[1].sym)
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:469
		{
			yyVAL.node = typedcl1(yyDollar[1].node, yyDollar[2].node, true)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:474
		{
			yyVAL.node = typedcl1(yyDollar[1].node, yyDollar[2].node, true)
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:480
		{
			yyVAL.node = yyDollar[1].node

			// These nodes do not carry line numbers.
			// Since a bare name used as an expression is an error,
			// introduce a wrapper node to give the correct line.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
				break
			}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:494
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, yyDollar[3].node)
			yyVAL.node.Etype = uint8(yyDollar[2].i) // rathole to pass opcode
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:499
		{
			if yyDollar[1].list.Next == nil && yyDollar[3].list.Next == nil {
				// simple
				yyVAL.node = Nod(OAS, yyDollar[1].list.N, yyDollar[3].list.N)
				break
			}
			// multiple
			yyVAL.node = Nod(OAS2, nil, nil)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Rlist = yyDollar[3].list
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:511
		{
			if yyDollar[3].list.N.Op == OTYPESW {
				yyVAL.node = Nod(OTYPESW, nil, yyDollar[3].list.N.Right)
				if yyDollar[3].list.Next != nil {
					Yyerror("expr.(type) must be alone in list")
				}
				if yyDollar[1].list.Next != nil {
					Yyerror("argument count mismatch: %d = %d", count(yyDollar[1].list), 1)
				} else if (yyDollar[1].list.N.Op != ONAME && yyDollar[1].list.N.Op != OTYPE && yyDollar[1].list.N.Op != ONONAME) || isblank(yyDollar[1].list.N) {
					Yyerror("invalid variable name %s in type switch", yyDollar[1].list.N)
				} else {
					yyVAL.node.Left = dclname(yyDollar[1].list.N.Sym)
				} // it's a colas, so must not re-use an oldname.
				break
			}
			yyVAL.node = colas(yyDollar[1].list, yyDollar[3].list, int32(yyDollar[2].i))
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:529
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OADD
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:535
		{
			yyVAL.node = Nod(OASOP, yyDollar[1].node, Nodintconst(1))
			yyVAL.node.Implicit = true
			yyVAL.node.Etype = OSUB
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:543
		{
			var n, nn *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Nname = nn

					// keep track of the instances for reporting unused
					nn.Defn = typesw.Right
				}
			}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:566
		{
			var n *Node

			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if yyDollar[2].list.Next == nil {
				n = Nod(OAS, yyDollar[2].list.N, yyDollar[4].node)
			} else {
				n = Nod(OAS2, nil, nil)
				n.List = yyDollar[2].list
				n.Rlist = list1(yyDollar[4].node)
			}
			yyVAL.node.List = list1(n)
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:584
		{
			// will be converted to OCASE
			// right will point to next case
			// done in casebody()
			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			yyVAL.node.List = list1(colas(yyDollar[2].list, list1(yyDollar[4].node), int32(yyDollar[3].i)))
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:593
		{
			var n, nn *Node

			markdcl()
			yyVAL.node = Nod(OXCASE, nil, nil)
			if typesw != nil && typesw.Right != nil {
				n = typesw.Right.Left
				if n != nil {
					// type switch - declare variable
					nn = newname(n.Sym)
					declare(nn, dclcontext)
					yyVAL.node.Nname = nn

					// keep track of the instances for reporting unused
					nn.Defn = typesw.Right
				}
			}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:614
		{
			markdcl()
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:618
		{
			if yyDollar[3].list == nil {
				yyVAL.node = Nod(OEMPTY, nil, nil)
			} else {
				yyVAL.node = liststmt(yyDollar[3].list)
			}
			popdcl()
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:629
		{
			// If the last token read by the lexer was consumed
			// as part of the case, clear it (parser has cleared yychar).
			// If the last token read by the lexer was the lookahead
			// leave it alone (parser has it cached in yychar).
			// This is so that the stmt_list action doesn't look at
			// the case tokens if the stmt_list is empty.
			yylast = yychar
			yyDollar[1].node.Xoffset = int64(block)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:640
		{
			// This is the only place in the language where a statement
			// list is not allowed to drop the final semicolon, because
			// it's the only place where a statement list is not followed
			// by a closing brace.  Handle the error for pedantry.

			// Find the final token of the statement list.
			// yylast is lookahead; yyprev is last of stmt_list
			last := yyprev

			if last > 0 && last != ';' && yychar != '}' {
				Yyerror("missing statement after label")
			}
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = yyDollar[3].list
			popdcl()
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:659
		{
			yyVAL.list = nil
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:663
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[2].node)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:669
		{
			markdcl()
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:673
		{
			yyVAL.list = yyDollar[3].list
			popdcl()
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:680
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Etype = 0 // := flag
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:686
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[4].node)
			yyVAL.node.List = yyDollar[1].list
			yyVAL.node.Colas = true
			colasdefn(yyDollar[1].list, yyVAL.node)
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:693
		{
			yyVAL.node = Nod(ORANGE, nil, yyDollar[2].node)
			yyVAL.node.Etype = 0 // := flag
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:700
		{
			// init ; test ; incr
			if yyDollar[5].node != nil && yyDollar[5].node.Colas {
				Yyerror("cannot declare in the for-increment")
			}
			yyVAL.node = Nod(OFOR, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
			yyVAL.node.Nincr = yyDollar[5].node
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:713
		{
			// normal test
			yyVAL.node = Nod(OFOR, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:722
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.Nbody = concat(yyVAL.node.Nbody, yyDollar[2].list)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:729
		{
			markdcl()
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:733
		{
			yyVAL.node = yyDollar[3].node
			popdcl()
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:740
		{
			// test
			yyVAL.node = Nod(OIF, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:746
		{
			// init ; test
			yyVAL.node = Nod(OIF, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:758
		{
			markdcl()
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:762
		{
			if yyDollar[3].node.Ntest == nil {
				Yyerror("missing condition in if statement")
			}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:768
		{
			yyDollar[3].node.Nbody = yyDollar[5].list
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:772
		{
			var n *Node
			var nn *NodeList

			yyVAL.node = yyDollar[3].node
			n = yyDollar[3].node
			popdcl()
			for nn = concat(yyDollar[7].list, yyDollar[8].list); nn != nil; nn = nn.Next {
				if nn.N.Op == OIF {
					popdcl()
				}
				n.Nelse = list1(nn.N)
				n = nn.N
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:790
		{
			markdcl()
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:794
		{
			if yyDollar[4].node.Ntest == nil {
				Yyerror("missing condition in if statement")
			}
			yyDollar[4].node.Nbody = yyDollar[5].list
			yyVAL.list = list1(yyDollar[4].node)
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:803
		{
			yyVAL.list = nil
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:807
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:812
		{
			yyVAL.list = nil
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:816
		{
			l := &NodeList{N: yyDollar[2].node}
			l.End = l
			yyVAL.list = l
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:824
		{
			markdcl()
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:828
		{
			var n *Node
			n = yyDollar[3].node.Ntest
			if n != nil && n.Op != OTYPESW {
				n = nil
			}
			typesw = Nod(OXXX, typesw, n)
		}
	case 91:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:837
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Op = OSWITCH
			yyVAL.node.List = yyDollar[6].list
			typesw = typesw.Left
			popdcl()
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:847
		{
			typesw = Nod(OXXX, typesw, nil)
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:851
		{
			yyVAL.node = Nod(OSELECT, nil, nil)
			yyVAL.node.Lineno = typesw.Lineno
			yyVAL.node.List = yyDollar[4].list
			typesw = typesw.Left
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:860
		{
			// init ; test ; incr
			if yyDollar[5].node != nil && yyDollar[5].node.Colas {
				Yyerror("cannot declare in the doselect-increment")
			}
			yyVAL.node = Nod(OFOR, nil, nil)
			if yyDollar[1].node != nil {
				yyVAL.node.Ninit = list1(yyDollar[1].node)
			}
			yyVAL.node.Ntest = yyDollar[3].node
			yyVAL.node.Nincr = yyDollar[5].node
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:873
		{
			// normal test
			yyVAL.node = Nod(OFOR, nil, nil)
			yyVAL.node.Ntest = yyDollar[1].node
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:883
		{
			// for
			markdcl()
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:888
		{
			// select
			typesw = Nod(OXXX, typesw, nil)
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:893
		{
			// select
			nd := Nod(ODOSELECT, nil, nil)
			nd.Lineno = typesw.Lineno
			nd.List = yyDollar[6].list
			typesw = typesw.Left

			// for
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Nbody = list1(nd)
			popdcl()
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:912
		{
			yyVAL.node = Nod(OOROR, yyDollar[1].node, yyDollar[3].node)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:916
		{
			yyVAL.node = Nod(OANDAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:920
		{
			yyVAL.node = Nod(OEQ, yyDollar[1].node, yyDollar[3].node)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:924
		{
			yyVAL.node = Nod(ONE, yyDollar[1].node, yyDollar[3].node)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:928
		{
			yyVAL.node = Nod(OLT, yyDollar[1].node, yyDollar[3].node)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:932
		{
			yyVAL.node = Nod(OLE, yyDollar[1].node, yyDollar[3].node)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:936
		{
			yyVAL.node = Nod(OGE, yyDollar[1].node, yyDollar[3].node)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:940
		{
			yyVAL.node = Nod(OGT, yyDollar[1].node, yyDollar[3].node)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:944
		{
			yyVAL.node = Nod(OADD, yyDollar[1].node, yyDollar[3].node)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:948
		{
			yyVAL.node = Nod(OSUB, yyDollar[1].node, yyDollar[3].node)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:952
		{
			yyVAL.node = Nod(OOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:956
		{
			yyVAL.node = Nod(OXOR, yyDollar[1].node, yyDollar[3].node)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:960
		{
			yyVAL.node = Nod(OMUL, yyDollar[1].node, yyDollar[3].node)
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:964
		{
			yyVAL.node = Nod(ODIV, yyDollar[1].node, yyDollar[3].node)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:968
		{
			yyVAL.node = Nod(OMOD, yyDollar[1].node, yyDollar[3].node)
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:972
		{
			yyVAL.node = Nod(OAND, yyDollar[1].node, yyDollar[3].node)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:976
		{
			yyVAL.node = Nod(OANDNOT, yyDollar[1].node, yyDollar[3].node)
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:980
		{
			yyVAL.node = Nod(OLSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:984
		{
			yyVAL.node = Nod(ORSH, yyDollar[1].node, yyDollar[3].node)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:989
		{
			yyVAL.node = Nod(OSEND, yyDollar[1].node, yyDollar[3].node)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:996
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1000
		{
			if yyDollar[2].node.Op == OCOMPLIT {
				// Special case for &T{...}: turn into (*T){...}.
				yyVAL.node = yyDollar[2].node
				yyVAL.node.Right = Nod(OIND, yyVAL.node.Right, nil)
				yyVAL.node.Right.Implicit = true
			} else {
				yyVAL.node = Nod(OADDR, yyDollar[2].node, nil)
			}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1011
		{
			yyVAL.node = Nod(OPLUS, yyDollar[2].node, nil)
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1015
		{
			yyVAL.node = Nod(OMINUS, yyDollar[2].node, nil)
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1019
		{
			yyVAL.node = Nod(ONOT, yyDollar[2].node, nil)
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1023
		{
			Yyerror("the bitwise complement operator is ^")
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1028
		{
			yyVAL.node = Nod(OCOM, yyDollar[2].node, nil)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1032
		{
			yyVAL.node = Nod(ORECV, yyDollar[2].node, nil)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1042
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1046
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:1051
		{
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Isddd = true
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1059
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1064
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1075
		{
			yyVAL.node = Nod(ODOTTYPE, yyDollar[1].node, yyDollar[4].node)
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1079
		{
			yyVAL.node = Nod(OTYPESW, nil, yyDollar[1].node)
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1083
		{
			yyVAL.node = Nod(OINDEX, yyDollar[1].node, yyDollar[3].node)
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:1087
		{
			yyVAL.node = Nod(OSLICE, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, yyDollar[5].node))
		}
	case 139:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1091
		{
			if yyDollar[5].node == nil {
				Yyerror("middle index required in 3-index slice")
			}
			if yyDollar[7].node == nil {
				Yyerror("final index required in 3-index slice")
			}
			yyVAL.node = Nod(OSLICE3, yyDollar[1].node, Nod(OKEY, yyDollar[3].node, Nod(OKEY, yyDollar[5].node, yyDollar[7].node)))
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1102
		{
			// conversion
			yyVAL.node = Nod(OCALL, yyDollar[1].node, nil)
			yyVAL.node.List = list1(yyDollar[3].node)
		}
	case 142:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1108
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
			fixlbrace(yyDollar[2].i)
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1115
		{
			yyVAL.node = yyDollar[3].node
			yyVAL.node.Right = yyDollar[1].node
			yyVAL.node.List = yyDollar[4].list
		}
	case 144:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line go.y:1121
		{
			Yyerror("cannot parenthesize type in composite literal")
			yyVAL.node = yyDollar[5].node
			yyVAL.node.Right = yyDollar[2].node
			yyVAL.node.List = yyDollar[6].list
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1130
		{
			// composite expression.
			// make node early so we get the right line number.
			yyVAL.node = Nod(OCOMPLIT, nil, nil)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1138
		{
			yyVAL.node = Nod(OKEY, yyDollar[1].node, yyDollar[3].node)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1144
		{
			// These nodes do not carry line numbers.
			// Since a composite literal commonly spans several lines,
			// the line number on errors may be misleading.
			// Introduce a wrapper node to give the correct line.
			yyVAL.node = yyDollar[1].node
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OTYPE, OPACK, OLITERAL:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
				yyVAL.node.Implicit = true
			}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1157
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1165
		{
			yyVAL.node = yyDollar[2].node
			yyVAL.node.List = yyDollar[3].list
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1173
		{
			yyVAL.node = yyDollar[2].node

			// Need to know on lhs of := whether there are ( ).
			// Don't bother with the OPAREN in other cases:
			// it's just a waste of memory and time.
			switch yyVAL.node.Op {
			case ONAME, ONONAME, OPACK, OTYPE, OLITERAL, OTYPESW:
				yyVAL.node = Nod(OPAREN, yyVAL.node, nil)
			}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1194
		{
			yyVAL.i = LBODY
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1198
		{
			yyVAL.i = '{'
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1209
		{
			if yyDollar[1].sym == nil {
				yyVAL.node = nil
			} else {
				yyVAL.node = newname(yyDollar[1].sym)
			}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1219
		{
			yyVAL.node = dclname(yyDollar[1].sym)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1224
		{
			yyVAL.node = nil
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1231
		{
			yyVAL.sym = yyDollar[1].sym
			// during imports, unqualified non-exported identifiers are from builtinpkg
			if importpkg != nil && !exportname(yyDollar[1].sym.Name) {
				yyVAL.sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1240
		{
			yyVAL.sym = nil
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1246
		{
			var p *Pkg

			if yyDollar[2].val.U.(string) == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.(string)) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.(string))
			}
			yyVAL.sym = Pkglookup(yyDollar[4].sym.Name, p)
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1260
		{
			var p *Pkg

			if yyDollar[2].val.U.(string) == "" {
				p = importpkg
			} else {
				if isbadimport(yyDollar[2].val.U.(string)) {
					errorexit()
				}
				p = mkpkg(yyDollar[2].val.U.(string))
			}
			yyVAL.sym = Pkglookup("?", p)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1276
		{
			yyVAL.node = oldname(yyDollar[1].sym)
			if yyVAL.node.Pack != nil {
				yyVAL.node.Pack.Used = true
			}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1297
		{
			Yyerror("final argument in variadic function missing type")
			yyVAL.node = Nod(ODDD, typenod(typ(TINTER)), nil)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1302
		{
			yyVAL.node = Nod(ODDD, yyDollar[2].node, nil)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1313
		{
			yyVAL.node = yyDollar[2].node
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1322
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1332
		{
			yyVAL.node = yyDollar[2].node
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1353
		{
			if yyDollar[1].node.Op == OPACK {
				var s *Sym
				s = restrictlookup(yyDollar[3].sym.Name, yyDollar[1].node.Pkg)
				yyDollar[1].node.Used = true
				yyVAL.node = oldname(s)
				break
			}
			yyVAL.node = Nod(OXDOT, yyDollar[1].node, newname(yyDollar[3].sym))
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1366
		{
			yyVAL.node = Nod(OTARRAY, yyDollar[2].node, yyDollar[4].node)
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1370
		{
			// array literal of nelem
			yyVAL.node = Nod(OTARRAY, Nod(ODDD, nil, nil), yyDollar[4].node)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1375
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[2].node, nil)
			yyVAL.node.Etype = Cboth
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1380
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Csend
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1385
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[2].node, nil)
			yyVAL.node.Etype = Cboth
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1390
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Csend
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1395
		{
			yyVAL.node = Nod(OTMAP, yyDollar[3].node, yyDollar[5].node)
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1403
		{
			yyVAL.node = Nod(OIND, yyDollar[2].node, nil)
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1409
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Crecv
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1415
		{
			yyVAL.node = Nod(OTCHAN, yyDollar[3].node, nil)
			yyVAL.node.Etype = Crecv
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1423
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1429
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1436
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			fixlbrace(yyDollar[1].i)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1442
		{
			yyVAL.node = Nod(OTSTRUCT, nil, nil)
			fixlbrace(yyDollar[1].i)
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1449
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			fixlbrace(yyDollar[2].i)
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1455
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			fixlbrace(yyDollar[2].i)
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1462
		{
			yyVAL.node = Nod(OTINTER, nil, nil)
			fixlbrace(yyDollar[1].i)
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1473
		{
			yyVAL.node = yyDollar[2].node
			if yyVAL.node == nil {
				break
			}
			if noescape && yyDollar[3].list != nil {
				Yyerror("can only use //go:noescape with external func implementations")
			}
			yyVAL.node.Nbody = yyDollar[3].list
			yyVAL.node.Func.Endlineno = lineno
			yyVAL.node.Noescape = noescape
			yyVAL.node.Func.Nosplit = nosplit
			yyVAL.node.Func.Nowritebarrier = nowritebarrier
			funcbody(yyVAL.node)
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1491
		{
			var t *Node

			yyVAL.node = nil
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)

			if yyDollar[1].sym.Name == "init" {
				yyDollar[1].sym = renameinit()
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func init must have no arguments and no return values")
				}
			}
			if localpkg.Name == "main" && yyDollar[1].sym.Name == "main" {
				if yyDollar[3].list != nil || yyDollar[5].list != nil {
					Yyerror("func main must have no arguments and no return values")
				}
			}

			t = Nod(OTFUNC, nil, nil)
			t.List = yyDollar[3].list
			t.Rlist = yyDollar[5].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Nname = newfuncname(yyDollar[1].sym)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Param.Ntype = t // TODO: check if nname already has an ntype
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1522
		{
			var rcvr, t *Node

			yyVAL.node = nil
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyDollar[6].list = checkarglist(yyDollar[6].list, 1)

			if yyDollar[2].list == nil {
				Yyerror("method has no receiver")
				break
			}
			if yyDollar[2].list.Next != nil {
				Yyerror("method has multiple receivers")
				break
			}
			rcvr = yyDollar[2].list.N
			if rcvr.Op != ODCLFIELD {
				Yyerror("bad receiver in method")
				break
			}

			t = Nod(OTFUNC, rcvr, nil)
			t.List = yyDollar[6].list
			t.Rlist = yyDollar[8].list

			yyVAL.node = Nod(ODCLFUNC, nil, nil)
			yyVAL.node.Func.Shortname = newfuncname(yyDollar[4].sym)
			yyVAL.node.Nname = methodname1(yyVAL.node.Func.Shortname, rcvr.Right)
			yyVAL.node.Nname.Defn = yyVAL.node
			yyVAL.node.Nname.Param.Ntype = t
			yyVAL.node.Nname.Nointerface = nointerface
			declare(yyVAL.node.Nname, PFUNC)

			funchdr(yyVAL.node)
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1560
		{
			var s *Sym
			var t *Type

			yyVAL.node = nil

			s = yyDollar[1].sym
			t = functype(nil, yyDollar[3].list, yyDollar[5].list)

			importsym(s, ONAME)
			if s.Def != nil && s.Def.Op == ONAME {
				if Eqtype(t, s.Def.Type) {
					dclcontext = PDISCARD // since we skip funchdr below
					break
				}
				Yyerror("inconsistent definition for func %v during import\n\t%v\n\t%v", s, s.Def.Type, t)
			}

			yyVAL.node = newfuncname(s)
			yyVAL.node.Type = t
			declare(yyVAL.node, PFUNC)

			funchdr(yyVAL.node)
		}
	case 220:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line go.y:1585
		{
			yyVAL.node = methodname1(newname(yyDollar[4].sym), yyDollar[2].list.N.Right)
			yyVAL.node.Type = functype(yyDollar[2].list.N, yyDollar[6].list, yyDollar[8].list)

			checkwidth(yyVAL.node.Type)
			addmethod(yyDollar[4].sym, yyVAL.node.Type, false, nointerface)
			nointerface = false
			funchdr(yyVAL.node)

			// inl.C's inlnode in on a dotmeth node expects to find the inlineable body as
			// (dotmeth's type).Nname.Inl, and dotmeth's type has been pulled
			// out by typecheck's lookdot as this $$.ttype.  So by providing
			// this back link here we avoid special casing there.
			yyVAL.node.Type.Nname = yyVAL.node
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1603
		{
			yyDollar[3].list = checkarglist(yyDollar[3].list, 1)
			yyVAL.node = Nod(OTFUNC, nil, nil)
			yyVAL.node.List = yyDollar[3].list
			yyVAL.node.Rlist = yyDollar[5].list
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1611
		{
			yyVAL.list = nil
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1615
		{
			yyVAL.list = yyDollar[2].list
			if yyVAL.list == nil {
				yyVAL.list = list1(Nod(OEMPTY, nil, nil))
			}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1624
		{
			yyVAL.list = nil
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1628
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, yyDollar[1].node))
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1632
		{
			yyDollar[2].list = checkarglist(yyDollar[2].list, 0)
			yyVAL.list = yyDollar[2].list
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1639
		{
			closurehdr(yyDollar[1].node)
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1645
		{
			yyVAL.node = closurebody(yyDollar[3].list)
			fixlbrace(yyDollar[2].i)
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1650
		{
			yyVAL.node = closurebody(nil)
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1661
		{
			yyVAL.list = nil
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1665
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[2].list)
			if nsyntaxerrors == 0 {
				testdclstack()
			}
			nointerface = false
			noescape = false
			nosplit = false
			nowritebarrier = false
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1679
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1686
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1692
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1696
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1703
		{
			yyVAL.list = concat(yyDollar[1].list, yyDollar[3].list)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1709
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1713
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1719
		{
			var l *NodeList

			var n *Node
			l = yyDollar[1].list
			if l == nil {
				// ? symbol, during import (list1(nil) == nil)
				n = yyDollar[2].node
				if n.Op == OIND {
					n = n.Left
				}
				n = embedded(n.Sym, importpkg)
				n.Right = yyDollar[2].node
				n.Val = yyDollar[3].val
				yyVAL.list = list1(n)
				break
			}

			for l = yyDollar[1].list; l != nil; l = l.Next {
				l.N = Nod(ODCLFIELD, l.N, yyDollar[2].node)
				l.N.Val = yyDollar[3].val
			}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1743
		{
			yyDollar[1].node.Val = yyDollar[2].val
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1748
		{
			yyDollar[2].node.Val = yyDollar[4].val
			yyVAL.list = list1(yyDollar[2].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1754
		{
			yyDollar[2].node.Right = Nod(OIND, yyDollar[2].node.Right, nil)
			yyDollar[2].node.Val = yyDollar[3].val
			yyVAL.list = list1(yyDollar[2].node)
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1760
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.Val = yyDollar[5].val
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:1767
		{
			yyDollar[3].node.Right = Nod(OIND, yyDollar[3].node.Right, nil)
			yyDollar[3].node.Val = yyDollar[5].val
			yyVAL.list = list1(yyDollar[3].node)
			Yyerror("cannot parenthesize embedded type")
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1776
		{
			var n *Node

			yyVAL.sym = yyDollar[1].sym
			n = oldname(yyDollar[1].sym)
			if n.Pack != nil {
				n.Pack.Used = true
			}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1786
		{
			var pkg *Pkg

			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OPACK {
				Yyerror("%v is not a package", yyDollar[1].sym)
				pkg = localpkg
			} else {
				yyDollar[1].sym.Def.Used = true
				pkg = yyDollar[1].sym.Def.Pkg
			}
			yyVAL.sym = restrictlookup(yyDollar[3].sym.Name, pkg)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1801
		{
			yyVAL.node = embedded(yyDollar[1].sym, localpkg)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1807
		{
			yyVAL.node = Nod(ODCLFIELD, yyDollar[1].node, yyDollar[2].node)
			ifacedcl(yyVAL.node)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1812
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[1].sym))
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1816
		{
			yyVAL.node = Nod(ODCLFIELD, nil, oldname(yyDollar[2].sym))
			Yyerror("cannot parenthesize embedded type")
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1823
		{
			// without func keyword
			yyDollar[2].list = checkarglist(yyDollar[2].list, 1)
			yyVAL.node = Nod(OTFUNC, fakethis(), nil)
			yyVAL.node.List = yyDollar[2].list
			yyVAL.node.Rlist = yyDollar[4].list
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1837
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1843
		{
			yyVAL.node = Nod(ONONAME, nil, nil)
			yyVAL.node.Sym = yyDollar[1].sym
			yyVAL.node = Nod(OKEY, yyVAL.node, yyDollar[2].node)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1852
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1856
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1861
		{
			yyVAL.list = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1865
		{
			yyVAL.list = yyDollar[1].list
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:1873
		{
			yyVAL.node = nil
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1878
		{
			yyVAL.node = liststmt(yyDollar[1].list)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1883
		{
			yyVAL.node = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1895
		{
			yyDollar[1].node = Nod(OLABEL, yyDollar[1].node, nil)
			yyDollar[1].node.Sym = dclstack // context, for goto restrictions
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:1900
		{
			var l *NodeList

			yyDollar[1].node.Defn = yyDollar[4].node
			l = list1(yyDollar[1].node)
			if yyDollar[4].node != nil {
				l = list(l, yyDollar[4].node)
			}
			yyVAL.node = liststmt(l)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1911
		{
			// will be converted to OFALL
			yyVAL.node = Nod(OXFALL, nil, nil)
			yyVAL.node.Xoffset = int64(block)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1917
		{
			yyVAL.node = Nod(OBREAK, yyDollar[2].node, nil)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1921
		{
			yyVAL.node = Nod(OCONTINUE, yyDollar[2].node, nil)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1925
		{
			yyVAL.node = Nod(OPROC, yyDollar[2].node, nil)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1929
		{
			yyVAL.node = Nod(ODEFER, yyDollar[2].node, nil)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1933
		{
			yyVAL.node = Nod(OGOTO, yyDollar[2].node, nil)
			yyVAL.node.Sym = dclstack // context, for goto restrictions
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:1938
		{
			yyVAL.node = Nod(ORETURN, nil, nil)
			yyVAL.node.List = yyDollar[2].list
			if yyVAL.node.List == nil && Curfn != nil {
				var l *NodeList

				for l = Curfn.Func.Dcl; l != nil; l = l.Next {
					if l.N.Class == PPARAM {
						continue
					}
					if l.N.Class != PPARAMOUT {
						break
					}
					if l.N.Sym.Def != l.N {
						Yyerror("%s is shadowed during return", l.N.Sym.Name)
					}
				}
			}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1960
		{
			yyVAL.list = nil
			if yyDollar[1].node != nil {
				yyVAL.list = list1(yyDollar[1].node)
			}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1967
		{
			yyVAL.list = yyDollar[1].list
			if yyDollar[3].node != nil {
				yyVAL.list = list(yyVAL.list, yyDollar[3].node)
			}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1976
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1980
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1986
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:1990
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:1996
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2000
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2006
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2010
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2019
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2023
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2027
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2031
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2036
		{
			yyVAL.list = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2040
		{
			yyVAL.list = yyDollar[1].list
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2054
		{
			yyVAL.node = nil
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2060
		{
			yyVAL.list = nil
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2066
		{
			yyVAL.node = nil
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2072
		{
			yyVAL.list = nil
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2078
		{
			yyVAL.list = nil
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2084
		{
			yyVAL.list = nil
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2090
		{
			yyVAL.val.Ctype = CTxxx
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2100
		{
			importimport(yyDollar[2].sym, yyDollar[3].val.U.(string))
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2104
		{
			importvar(yyDollar[2].sym, yyDollar[3].typ)
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2108
		{
			importconst(yyDollar[2].sym, Types[TIDEAL], yyDollar[4].node)
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line go.y:2112
		{
			importconst(yyDollar[2].sym, yyDollar[3].typ, yyDollar[5].node)
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2116
		{
			importtype(yyDollar[2].typ, yyDollar[3].typ)
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2120
		{
			if yyDollar[2].node == nil {
				dclcontext = PEXTERN // since we skip the funcbody below
				break
			}

			yyDollar[2].node.Func.Inl = yyDollar[3].list

			funcbody(yyDollar[2].node)
			importlist = list(importlist, yyDollar[2].node)

			if Debug['E'] > 0 {
				fmt.Printf("import [%q] func %v \n", importpkg.Path, yyDollar[2].node)
				if Debug['m'] > 2 && yyDollar[2].node.Func.Inl != nil {
					fmt.Printf("inl body:%v\n", yyDollar[2].node.Func.Inl)
				}
			}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2141
		{
			yyVAL.sym = yyDollar[1].sym
			structpkg = yyVAL.sym.Pkg
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2148
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
			importsym(yyDollar[1].sym, OTYPE)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2168
		{
			yyVAL.typ = pkgtype(yyDollar[1].sym)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2172
		{
			// predefined name like uint8
			yyDollar[1].sym = Pkglookup(yyDollar[1].sym.Name, builtinpkg)
			if yyDollar[1].sym.Def == nil || yyDollar[1].sym.Def.Op != OTYPE {
				Yyerror("%s is not a type", yyDollar[1].sym.Name)
				yyVAL.typ = nil
			} else {
				yyVAL.typ = yyDollar[1].sym.Def.Type
			}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2183
		{
			yyVAL.typ = aindex(nil, yyDollar[3].typ)
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2187
		{
			yyVAL.typ = aindex(nodlit(yyDollar[2].val), yyDollar[4].typ)
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2191
		{
			yyVAL.typ = maptype(yyDollar[3].typ, yyDollar[5].typ)
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2195
		{
			yyVAL.typ = tostruct(yyDollar[3].list)
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2199
		{
			yyVAL.typ = tointerface(yyDollar[3].list)
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2203
		{
			yyVAL.typ = Ptrto(yyDollar[2].typ)
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2207
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[2].typ
			yyVAL.typ.Chan = Cboth
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2213
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Cboth
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2219
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Csend
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2227
		{
			yyVAL.typ = typ(TCHAN)
			yyVAL.typ.Type = yyDollar[3].typ
			yyVAL.typ.Chan = Crecv
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2235
		{
			yyVAL.typ = functype(nil, yyDollar[3].list, yyDollar[5].list)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2241
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[2].typ))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Val = yyDollar[3].val
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line go.y:2249
		{
			var t *Type

			t = typ(TARRAY)
			t.Bound = -1
			t.Type = yyDollar[3].typ

			yyVAL.node = Nod(ODCLFIELD, nil, typenod(t))
			if yyDollar[1].sym != nil {
				yyVAL.node.Left = newname(yyDollar[1].sym)
			}
			yyVAL.node.Isddd = true
			yyVAL.node.Val = yyDollar[4].val
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2266
		{
			var s *Sym
			var p *Pkg

			if yyDollar[1].sym != nil && yyDollar[1].sym.Name != "?" {
				yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(yyDollar[2].typ))
				yyVAL.node.Val = yyDollar[3].val
			} else {
				s = yyDollar[2].typ.Sym
				if s == nil && Isptr[yyDollar[2].typ.Etype] {
					s = yyDollar[2].typ.Type.Sym
				}
				p = importpkg
				if yyDollar[1].sym != nil {
					p = yyDollar[1].sym.Pkg
				}
				yyVAL.node = embedded(s, p)
				yyVAL.node.Right = typenod(yyDollar[2].typ)
				yyVAL.node.Val = yyDollar[3].val
			}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2290
		{
			yyVAL.node = Nod(ODCLFIELD, newname(yyDollar[1].sym), typenod(functype(fakethis(), yyDollar[3].list, yyDollar[5].list)))
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2294
		{
			yyVAL.node = Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line go.y:2299
		{
			yyVAL.list = nil
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2306
		{
			yyVAL.list = yyDollar[2].list
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2310
		{
			yyVAL.list = list1(Nod(ODCLFIELD, nil, typenod(yyDollar[1].typ)))
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2320
		{
			yyVAL.node = nodlit(yyDollar[1].val)
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line go.y:2324
		{
			yyVAL.node = nodlit(yyDollar[2].val)
			switch yyVAL.node.Val.Ctype {
			case CTINT, CTRUNE:
				mpnegfix(yyVAL.node.Val.U.(*Mpint))
				break
			case CTFLT:
				mpnegflt(yyVAL.node.Val.U.(*Mpflt))
				break
			case CTCPLX:
				mpnegflt(&yyVAL.node.Val.U.(*Mpcplx).Real)
				mpnegflt(&yyVAL.node.Val.U.(*Mpcplx).Imag)
				break
			default:
				Yyerror("bad negated constant")
			}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2342
		{
			yyVAL.node = oldname(Pkglookup(yyDollar[1].sym.Name, builtinpkg))
			if yyVAL.node.Op != OLITERAL {
				Yyerror("bad constant %v", yyVAL.node.Sym)
			}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line go.y:2352
		{
			if yyDollar[2].node.Val.Ctype == CTRUNE && yyDollar[4].node.Val.Ctype == CTINT {
				yyVAL.node = yyDollar[2].node
				mpaddfixfix(yyDollar[2].node.Val.U.(*Mpint), yyDollar[4].node.Val.U.(*Mpint), 0)
				break
			}
			yyDollar[4].node.Val.U.(*Mpcplx).Real = yyDollar[4].node.Val.U.(*Mpcplx).Imag
			Mpmovecflt(&yyDollar[4].node.Val.U.(*Mpcplx).Imag, 0.0)
			yyVAL.node = nodcplxlit(yyDollar[2].node.Val, yyDollar[4].node.Val)
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2368
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2372
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2378
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2382
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line go.y:2388
		{
			yyVAL.list = list1(yyDollar[1].node)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line go.y:2392
		{
			yyVAL.list = list(yyDollar[1].list, yyDollar[3].node)
		}
	}
	goto yystack /* stack new state and value */
}
