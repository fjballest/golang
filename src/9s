

gf ., | gr plan9


cmd/compile/internal/gc/lex.go:1717: 		pragcgobuf += fmt.Sprintf("cgo_dynamic_linker %v\n", plan9quote(p))
cmd/compile/internal/gc/lex.go:1732: 			pragcgobuf += fmt.Sprintf("%s %v\n", verb, plan9quote(local))
cmd/compile/internal/gc/lex.go:1740: 		pragcgobuf += fmt.Sprintf("%s %v %v\n", verb, plan9quote(local), plan9quote(remote))
cmd/compile/internal/gc/lex.go:1757: 			pragcgobuf += fmt.Sprintf("cgo_import_dynamic %v\n", plan9quote(local))
cmd/compile/internal/gc/lex.go:1766: 			pragcgobuf += fmt.Sprintf("cgo_import_dynamic %v %v\n", plan9quote(local), plan9quote(remote))
cmd/compile/internal/gc/lex.go:1774: 		pragcgobuf += fmt.Sprintf("cgo_import_dynamic %v %v %v\n", plan9quote(local), plan9quote(remote), plan9quote(p))
cmd/compile/internal/gc/lex.go:1788: 		pragcgobuf += fmt.Sprintf("cgo_import_static %v\n", plan9quote(local))
cmd/compile/internal/gc/lex.go:1801: 		pragcgobuf += fmt.Sprintf("cgo_ldflag %v\n", plan9quote(p))
cmd/compile/internal/gc/util.go:33: func plan9quote(s string) string {
cmd/dist/build.go:70: 	"plan9",
cmd/dist/build.go:1002: 	plan9 := flag.Bool("9", false, "emit plan 9 syntax")
cmd/dist/build.go:1008: 	case *plan9:
cmd/dist/build.go:1157: 	} else if gohostos == "plan9" {
cmd/dist/test.go:139: 		// which the plan9 builder was using for ages. Delete
cmd/dist/test.go:142: 		if runtime.GOOS == "plan9" && t.runRxStr == "std" {
cmd/dist/test.go:686: 	case "windows", "plan9":
cmd/dist/util.go:404: 	case "plan9":
cmd/go/build.go:3244: 	case "plan9":
cmd/go/env.go:52: 	if goos != "plan9" {
cmd/go/env.go:92: 			case "plan9":
cmd/go/signal_notunix.go:5: // +build plan9 windows
cmd/internal/obj/link.go:543: 	Hplan9
cmd/internal/obj/sym.go:55: 	{"plan9", Hplan9},
cmd/internal/obj/sym.go:114: 	case Hplan9, Hwindows:
cmd/internal/obj/x86/asm6.go:3797: 						case obj.Hplan9:
cmd/internal/obj/x86/asm6.go:3859: 					case obj.Hplan9:
cmd/internal/obj/x86/obj6.go:46: 			obj.Hplan9,
cmd/internal/obj/x86/obj6.go:55: 	case obj.Hplan9,
cmd/internal/obj/x86/obj6.go:173: 	if ctxt.Headtype == obj.Hwindows && p.Mode == 64 || ctxt.Headtype == obj.Hplan9 {
cmd/internal/obj/x86/obj6.go:442: 	if ctxt.Headtype == obj.Hplan9 && ctxt.Plan9privates == nil {
cmd/internal/objfile/plan9obj.go:10: 	"debug/plan9obj"
cmd/internal/objfile/plan9obj.go:25: type plan9File struct {
cmd/internal/objfile/plan9obj.go:26: 	plan9 *plan9obj.File
cmd/internal/objfile/plan9obj.go:30: 	f, err := plan9obj.NewFile(r)
cmd/internal/objfile/plan9obj.go:34: 	return &plan9File{f}, nil
cmd/internal/objfile/plan9obj.go:37: func (f *plan9File) symbols() ([]Sym, error) {
cmd/internal/objfile/plan9obj.go:38: 	plan9Syms, err := f.plan9.Symbols()
cmd/internal/objfile/plan9obj.go:46: 	for _, s := range plan9Syms {
cmd/internal/objfile/plan9obj.go:56: 	for _, s := range plan9Syms {
cmd/internal/objfile/plan9obj.go:71: func (f *plan9File) pcln() (textStart uint64, symtab, pclntab []byte, err error) {
cmd/internal/objfile/plan9obj.go:72: 	textStart = f.plan9.LoadAddress + f.plan9.HdrSize
cmd/internal/objfile/plan9obj.go:73: 	if pclntab, err = loadPlan9Table(f.plan9, "runtime.pclntab", "runtime.epclntab"); err != nil {
cmd/internal/objfile/plan9obj.go:77: 		if pclntab, err2 = loadPlan9Table(f.plan9, "pclntab", "epclntab"); err2 != nil {
cmd/internal/objfile/plan9obj.go:81: 	if symtab, err = loadPlan9Table(f.plan9, "runtime.symtab", "runtime.esymtab"); err != nil {
cmd/internal/objfile/plan9obj.go:84: 		if symtab, err2 = loadPlan9Table(f.plan9, "symtab", "esymtab"); err2 != nil {
cmd/internal/objfile/plan9obj.go:91: func (f *plan9File) text() (textStart uint64, text []byte, err error) {
cmd/internal/objfile/plan9obj.go:92: 	sect := f.plan9.Section("text")
cmd/internal/objfile/plan9obj.go:96: 	textStart = f.plan9.LoadAddress + f.plan9.HdrSize
cmd/internal/objfile/plan9obj.go:101: func findPlan9Symbol(f *plan9obj.File, name string) (*plan9obj.Sym, error) {
cmd/internal/objfile/plan9obj.go:115: func loadPlan9Table(f *plan9obj.File, sname, ename string) ([]byte, error) {
cmd/internal/objfile/plan9obj.go:136: func (f *plan9File) goarch() string {
cmd/internal/objfile/plan9obj.go:137: 	switch f.plan9.Magic {
cmd/internal/objfile/plan9obj.go:138: 	case plan9obj.Magic386:
cmd/internal/objfile/plan9obj.go:140: 	case plan9obj.MagicAMD64:
cmd/internal/objfile/plan9obj.go:142: 	case plan9obj.MagicARM:
cmd/internal/rsc.io/arm/armasm/decode_test.go:58: 			case "plan9":
cmd/internal/rsc.io/arm/armasm/ext_test.go:250: 		//case "plan9":
cmd/internal/rsc.io/arm/armasm/plan9x.go:34: 		args = append(args, plan9Arg(&inst, pc, symname, a))
cmd/internal/rsc.io/arm/armasm/plan9x.go:105: 				shift = fmt.Sprintf("%s%d", plan9Shift[mem.Shift], mem.Count)
cmd/internal/rsc.io/arm/armasm/plan9x.go:150: var plan9Shift = []string{"<<", ">>", "->", "@>", "@x>"}
cmd/internal/rsc.io/arm/armasm/plan9x.go:152: func plan9Arg(inst *Inst, pc uint64, symname func(uint64) (string, uint64), arg Arg) string {
cmd/internal/rsc.io/arm/armasm/plan9x.go:205: 		return fmt.Sprintf("R%d%s$%d", int(a.Reg), plan9Shift[a.Shift], int(a.Count))
cmd/internal/rsc.io/arm/armasm/plan9x.go:208: 		return fmt.Sprintf("R%d%sR%d", int(a.Reg), plan9Shift[a.Shift], int(a.RegCount))
cmd/internal/rsc.io/arm/armasm/testdata/Makefile:4: 	egrep '	(gnu|plan9)	' ../log |sort >newdecode.txt
cmd/internal/rsc.io/x86/x86asm/decode_test.go:60: 			case "plan9":
cmd/internal/rsc.io/x86/x86asm/ext_test.go:255: 		case "plan9":
cmd/internal/rsc.io/x86/x86asm/plan9ext_test.go:17: const plan9Path = "testdata/libmach8db"
cmd/internal/rsc.io/x86/x86asm/plan9ext_test.go:24: 	if _, err := os.Stat(plan9Path); err != nil {
cmd/internal/rsc.io/x86/x86asm/plan9ext_test.go:28: 	testExtDis(t, "plan9", arch, plan9, generate, allowedMismatchPlan9)
cmd/internal/rsc.io/x86/x86asm/plan9ext_test.go:39: func plan9(ext *ExtDis) error {
cmd/internal/rsc.io/x86/x86asm/plan9ext_test.go:44: 	b, err := ext.Run(plan9Path, flag, ext.File.Name())
cmd/internal/rsc.io/x86/x86asm/plan9x.go:29: 		args = append(args, plan9Arg(&inst, pc, symname, a))
cmd/internal/rsc.io/x86/x86asm/plan9x.go:51: 	if plan9Suffix[inst.Op] {
cmd/internal/rsc.io/x86/x86asm/plan9x.go:71: func plan9Arg(inst *Inst, pc uint64, symname func(uint64) (string, uint64), arg Arg) string {
cmd/internal/rsc.io/x86/x86asm/plan9x.go:74: 		return plan9Reg[a]
cmd/internal/rsc.io/x86/x86asm/plan9x.go:117: 			s += fmt.Sprintf("%s:", plan9Reg[a.Segment])
cmd/internal/rsc.io/x86/x86asm/plan9x.go:125: 			s += fmt.Sprintf("(%s)", plan9Reg[a.Base])
cmd/internal/rsc.io/x86/x86asm/plan9x.go:128: 			s += fmt.Sprintf("(%s*%d)", plan9Reg[a.Index], a.Scale)
cmd/internal/rsc.io/x86/x86asm/plan9x.go:135: var plan9Suffix = [maxOp + 1]bool{
cmd/internal/rsc.io/x86/x86asm/plan9x.go:191: var plan9Reg = [...]string{
cmd/internal/rsc.io/x86/x86asm/plan9x_test.go:12: func TestPlan932Manual(t *testing.T)   { testPlan932(t, hexCases(t, plan9ManualTests)) }
cmd/internal/rsc.io/x86/x86asm/plan9x_test.go:21: func TestPlan964Manual(t *testing.T)   { testPlan964(t, hexCases(t, plan9ManualTests)) }
cmd/internal/rsc.io/x86/x86asm/plan9x_test.go:40: // plan9ManualTests holds test cases that will be run by TestPlan9Manual32 and TestPlan9Manual64.
cmd/internal/rsc.io/x86/x86asm/plan9x_test.go:43: var plan9ManualTests = `
cmd/internal/rsc.io/x86/x86asm/plan9x_test.go:52: // Instructions known to us but not to plan9.
cmd/internal/rsc.io/x86/x86asm/plan9x_test.go:53: var plan9Unsupported = strings.Fields(`


cmd/link/internal/amd64/asm.go:676: 	case obj.Hplan9,
cmd/link/internal/amd64/asm.go:707: 		case obj.Hplan9,
cmd/link/internal/amd64/asm.go:750: 		case obj.Hplan9:
cmd/link/internal/amd64/asm.go:751: 			ld.Asmplan9sym()
cmd/link/internal/amd64/asm.go:785: 	case obj.Hplan9: /* plan9 */
cmd/link/internal/amd64/obj.go:122: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/arm/asm.go:564: 		case obj.Hplan9:
cmd/link/internal/arm/asm.go:592: 		case obj.Hplan9:
cmd/link/internal/arm/asm.go:593: 			ld.Asmplan9sym()
cmd/link/internal/arm/asm.go:621: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/arm/obj.go:109: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/arm64/asm.go:348: 		case obj.Hplan9:
cmd/link/internal/arm64/asm.go:376: 		case obj.Hplan9:
cmd/link/internal/arm64/asm.go:377: 			ld.Asmplan9sym()
cmd/link/internal/arm64/asm.go:405: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/arm64/obj.go:111: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/ld/data.go:417: 			if Iself || Ctxt.Headtype == obj.Hplan9 || Ctxt.Headtype == obj.Hdarwin {
cmd/link/internal/ld/data.go:1637: 	if HEADTYPE == obj.Hplan9 {
cmd/link/internal/ld/ldelf.go:15: http://code.swtch.com/plan9port/src/tip/src/libmach/
cmd/link/internal/ld/ldmacho.go:13: http://code.swtch.com/plan9port/src/tip/src/libmach/
cmd/link/internal/ld/sym.go:59: 	{"plan9", obj.Hplan9},
cmd/link/internal/ld/sym.go:95: 	case obj.Hplan9, obj.Hwindows:
cmd/link/internal/ld/symtab.go:207: func putplan9sym(x *LSym, s string, t int, addr int64, size int64, ver int, go_ *LSym) {
cmd/link/internal/ld/symtab.go:222: 		if HEADTYPE == obj.Hplan9 && Thearch.Thechar == '6' && Debug['8'] == 0 {
cmd/link/internal/ld/symtab.go:259: func Asmplan9sym() {
cmd/link/internal/ld/symtab.go:260: 	genasmsym(putplan9sym)
cmd/link/internal/ppc64/asm.go:661: 		case obj.Hplan9:
cmd/link/internal/ppc64/asm.go:686: 		case obj.Hplan9:
cmd/link/internal/ppc64/asm.go:687: 			ld.Asmplan9sym()
cmd/link/internal/ppc64/asm.go:710: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/ppc64/obj.go:115: 	case obj.Hplan9: /* plan 9 */
cmd/link/internal/x86/asm.go:550: 		case obj.Hplan9:
cmd/link/internal/x86/asm.go:582: 		case obj.Hplan9:
cmd/link/internal/x86/asm.go:583: 			ld.Asmplan9sym()
cmd/link/internal/x86/asm.go:616: 	case obj.Hplan9: /* plan9 */
cmd/link/internal/x86/obj.go:111: 	case obj.Hplan9: /* plan 9 */
cmd/nm/nm_test.go:87: 		"plan9obj/testdata/amd64-plan9-exec",
cmd/nm/nm_test.go:88: 		"plan9obj/testdata/386-plan9-exec",
cmd/objdump/objdump_test.go:120: 	case "plan9", "windows":
cmd/yacc/doc.go:18: 	http://plan9.bell-labs.com/magic/man2html/1/yacc
crypto/rand/rand_unix.go:5: // +build darwin dragonfly freebsd linux nacl netbsd openbsd plan9 solaris
crypto/rand/rand_unix.go:29: 	if runtime.GOOS == "plan9" {
crypto/rand/rand_unix.go:58: 		if runtime.GOOS == "plan9" {
crypto/x509/root_plan9.go:5: // +build plan9
debug/gosym/pclntab_test.go:34: 	if runtime.GOOS == "windows" || runtime.GOOS == "plan9" {
debug/gosym/symtab.go:11: // format, documented at http://plan9.bell-labs.com/magic/man2html/6/a.out.
debug/plan9obj/file.go:5: // Package plan9obj implements access to Plan 9 a.out object files.
debug/plan9obj/file.go:6: package plan9obj
debug/plan9obj/file_test.go:5: package plan9obj
debug/plan9obj/file_test.go:20: 		"testdata/386-plan9-exec",
debug/plan9obj/file_test.go:31: 		"testdata/amd64-plan9-exec",
debug/plan9obj/plan9obj.go:9: package plan9obj
go/build/build_test.go:187: 	ctxtP9      = Context{GOARCH: "arm", GOOS: "plan9"}
go/build/build_test.go:205: 	{ctxtAndroid, "foo_plan9.go", "", false},
go/build/build_test.go:207: 	{ctxtAndroid, "plan9.go", "", true},
go/build/build_test.go:208: 	{ctxtAndroid, "plan9_test.go", "", true},
go/build/deps_test.go:343: 	"debug/plan9obj":                    {"encoding/binary", "errors", "fmt", "io", "os"},
go/build/deps_test.go:390: var geese = []string{"android", "darwin", "dragonfly", "freebsd", "linux", "nacl", "netbsd", "openbsd", "plan9", "solaris", "windows"}
go/build/deps_test.go:401: 	osPkg{"plan9", "log/syslog"}:   true,
go/build/deps_test.go:467: 				// be reasonable (like arm,plan9,cgo), so ignore
go/build/syslist.go:7: const goosList = "android darwin dragonfly freebsd linux nacl netbsd openbsd plan9 solaris windows "
image/color/palette/gen.go:92: 	fmt.Fprintln(w, "// http://plan9.bell-labs.com/magic/man2html/6/color")
image/color/palette/palette.go:22: // http://plan9.bell-labs.com/magic/man2html/6/color
log/syslog/syslog.go:5: // +build !windows,!nacl,!plan9
log/syslog/syslog_test.go:5: // +build !windows,!nacl,!plan9
log/syslog/syslog_unix.go:5: // +build !windows,!nacl,!plan9
mime/type_plan9.go:28: 	typeFiles = []string{"testdata/test.types.plan9"}
net/dial_gen.go:5: // +build windows plan9
net/dial_test.go:25: 	case "plan9":
net/dial_test.go:83: 	case "darwin", "dragonfly", "freebsd", "netbsd", "openbsd", "plan9", "solaris", "windows":
net/dial_test.go:103: 	case "plan9":
net/dial_test.go:110: 	case "plan9", "windows":
net/dial_test.go:114: 		if runtime.GOOS == "plan9" {
net/dial_test.go:152: 	case "plan9":
net/error_posix_test.go:5: // +build !plan9
net/error_test.go:104: 	case "plan9":
net/error_test.go:154: 	case "plan9":
net/error_test.go:198: 	case "plan9":
net/fd_plan9.go:36: 	// On plan9, use the relatively inefficient
net/file_test.go:167: 	case "nacl", "plan9", "windows":
net/http/cgi/plan9_test.go:5: // +build plan9
net/http/cgi/posix_test.go:5: // +build !plan9
net/http/httputil/reverseproxy_test.go:218: 	if runtime.GOOS == "plan9" {
net/http/serve_test.go:446: 	if runtime.GOOS == "plan9" {
net/http/serve_test.go:525: 	if runtime.GOOS == "plan9" {
net/http/serve_test.go:880: 	if runtime.GOOS == "plan9" {
net/http/serve_test.go:1584: 	if runtime.GOOS == "plan9" {
net/http/transport_test.go:867: 	if runtime.GOOS == "plan9" {
net/http/transport_test.go:936: 	if runtime.GOOS == "plan9" {
net/http/transport_test.go:1144: 	if runtime.GOOS == "plan9" {
net/http/transport_test.go:1208: 	if runtime.GOOS == "plan9" {
net/http/transport_test.go:2161: 	if runtime.GOOS == "plan9" {
net/interface_stub.go:5: // +build nacl plan9 solaris
net/interface_test.go:96: 	case "nacl", "plan9", "solaris":
net/interface_test.go:111: 	case "dragonfly", "nacl", "netbsd", "openbsd", "plan9", "solaris":
net/internal/socktest/main_test.go:5: // +build !plan9
net/internal/socktest/main_unix_test.go:5: // +build !plan9,!windows
net/internal/socktest/switch_posix.go:5: // +build !plan9
net/internal/socktest/switch_stub.go:5: // +build plan9
net/listen_test.go:5: // +build !plan9
net/listen_test.go:64: 	case "plan9":
net/listen_test.go:125: 	case "plan9":
net/listen_test.go:221: 	case "nacl", "plan9":
net/listen_test.go:308: 	case "nacl", "plan9":
net/listen_test.go:481: 	case "plan9":
net/listen_test.go:525: 	case "android", "nacl", "plan9":
net/listen_test.go:595: 	case "plan9":
net/listen_test.go:662: 	case "dragonfly", "netbsd", "openbsd", "plan9", "solaris", "windows":
net/main_posix_test.go:5: // +build !plan9
net/net_test.go:16: 	case "nacl", "plan9":
net/net_test.go:68: 	case "nacl", "plan9":
net/parse_test.go:15: 	// /etc/services file does not exist on android, plan9, windows.
net/parse_test.go:17: 	case "android", "plan9", "windows":
net/platform_test.go:26: 		case "nacl", "plan9":
net/platform_test.go:35: 		case "nacl", "plan9", "windows":
net/platform_test.go:44: 		case "android", "darwin", "nacl", "plan9", "windows":
net/platform_test.go:155: 	case "plan9", "windows":
net/protoconn_test.go:25: 	case "plan9":
net/rpc/client_test.go:56: 	if runtime.GOOS == "plan9" {
net/tcpsockopt_plan9.go:5: // TCP socket options for plan9
net/textproto/reader.go:208: //	220 plan9.bell-labs.com ESMTP
net/timeout_test.go:42: 		case "plan9", "windows":
net/timeout_test.go:44: 			if runtime.GOOS == "plan9" {
net/timeout_test.go:101: 	case "plan9":
net/timeout_test.go:152: 	case "plan9":
net/timeout_test.go:196: 	case "plan9":
net/timeout_test.go:245: 	case "plan9":
net/timeout_test.go:304: 	case "plan9":
net/timeout_test.go:372: 	case "nacl", "plan9":
net/timeout_test.go:445: 	case "plan9":
net/timeout_test.go:491: 	case "plan9":
net/timeout_test.go:560: 	case "nacl", "plan9":
net/timeout_test.go:611: 	case "plan9":
net/timeout_test.go:647: 	case "plan9":
net/timeout_test.go:683: 	case "plan9":
net/timeout_test.go:740: 	case "plan9":
net/timeout_test.go:860: 	case "plan9":
net/timeout_test.go:938: 	case "nacl", "plan9":
net/udp_test.go:65: 	case "plan9":
net/udp_test.go:294: 	case "nacl", "plan9":
net/udp_test.go:331: 	case "nacl", "plan9":
net/unix_test.go:5: // +build !nacl,!plan9,!windows
os/exec/exec_test.go:134: 	case "plan9":
os/exec/exec_test.go:577: 	case "plan9":
os/exec/exec_test.go:669: 		case "plan9":
os/exec/exec_test.go:690: 					case "plan9":
os/file_posix.go:43: 	// No mapping for Go's ModeTemporary (plan9 only).
os/os_test.go:79: 	case "plan9":
os/os_test.go:336: 	case "plan9":
os/os_test.go:449: 	case "windows", "plan9":
os/os_test.go:540: 	if runtime.GOOS == "plan9" {
os/os_test.go:541: 		t.Skip("skipping on plan9, hardlinks not supported")
os/os_test.go:607: 	case "android", "nacl", "plan9":
os/os_test.go:674: 	case "plan9", "nacl":
os/os_test.go:727: 	if runtime.GOOS == "plan9" {
os/os_test.go:728: 		t.Skip("skipping on plan9")
os/os_test.go:958: 	if !pat.Before(at) && runtime.GOOS != "plan9" && runtime.GOOS != "nacl" {
os/os_test.go:983: 	case "plan9":
os/os_test.go:1174: 			if runtime.GOOS == "plan9" {
os/os_test.go:1262: 	case "android", "nacl", "plan9":
os/os_test.go:1580: 	case "plan9":
os/os_test.go:1582: 		t.Skipf("skipping test on plan9; see issue 8206")
os/os_unix_test.go:37: 	if runtime.GOOS == "windows" || runtime.GOOS == "plan9" {
os/path_test.go:173: 	case "nacl", "plan9":
os/path_test.go:208: 	case "android", "plan9", "windows":
os/user/lookup_stubs.go:5: // +build !cgo,!windows,!plan9 android
os/user/user_test.go:58: 	if runtime.GOOS == "plan9" {
os/user/user_test.go:76: 	if runtime.GOOS == "plan9" {
path/filepath/example_unix_test.go:5: // +build !windows,!plan9
path/filepath/match_test.go:170: 	case "nacl", "plan9":
path/filepath/path.go:83: // http://plan9.bell-labs.com/sys/doc/lexnames.html
path/filepath/path_test.go:738: 	case "nacl", "plan9":
path/filepath/path_unix.go:39: 	// If there's a bug here, fix the logic in ./path_plan9.go too.
path/path.go:68: // http://plan9.bell-labs.com/sys/doc/lexnames.html
runtime/asm_386.s:75: 	CMPL	runtime·isplan9(SB), $1
runtime/asm_amd64.s:72: 	CMPL	runtime·isplan9(SB), $1
runtime/crash_cgo_test.go:40: 	if runtime.GOOS == "plan9" {
runtime/crash_cgo_test.go:57: 	case "plan9", "windows":
runtime/env_test.go:14: 	if runtime.GOOS == "plan9" {
runtime/env_test.go:15: 		t.Skipf("skipping plan9, it is inconsistent by allowing GOROOT to be updated by Setenv")
runtime/lock_sema.go:5: // +build darwin nacl netbsd openbsd plan9 solaris windows
runtime/malloc.go:148: 	//   plan9            | 4KB        | 3
runtime/malloc.go:149: 	_NumStackOrders = 4 - ptrSize/4*goos_windows - 1*goos_plan9
runtime/memclr_386.s:5: // +build !plan9
runtime/memclr_amd64.s:5: // +build !plan9
runtime/memmove_386.s:26: // +build !plan9
runtime/memmove_amd64.s:26: // +build !plan9
runtime/netpoll_stub.go:5: // +build plan9
runtime/os1_plan9.go:200: 		tstart_plan9(mp)
runtime/os1_plan9.go:217: 		ret := plan9_tsemacquire(&_g_.m.waitsemacount, ms)
runtime/os1_plan9.go:223: 	for plan9_semacquire(&_g_.m.waitsemacount, 1) < 0 {
runtime/os1_plan9.go:231: 	plan9_semrelease(&mp.waitsemacount, 1)
runtime/os_plan9.go:33: func plan9_semacquire(addr *uint32, block int32) int32
runtime/os_plan9.go:36: func plan9_tsemacquire(addr *uint32, ms int32) int32
runtime/os_plan9.go:39: func plan9_semrelease(addr *uint32, count int32) int32
runtime/os_plan9.go:55: func tstart_plan9(newm *m)
runtime/pprof/pprof_test.go:136: 	case "plan9":
runtime/pprof/pprof_test.go:137: 		t.Skip("skipping on plan9")
runtime/pprof/pprof_test.go:328: 	"plan9":  true,
runtime/pprof/trace_stack_test.go:235: 	if runtime.GOOS != "windows" && runtime.GOOS != "plan9" {
runtime/proc1.go:860: 	if iscgo || GOOS == "solaris" || GOOS == "windows" || GOOS == "plan9" {
runtime/rt0_plan9_386.s:7: TEXT _rt0_386_plan9(SB),NOSPLIT,$12
runtime/rt0_plan9_386.s:19: DATA  runtime·isplan9(SB)/4, $1
runtime/rt0_plan9_386.s:20: GLOBL runtime·isplan9(SB), NOPTR, $4
runtime/rt0_plan9_amd64.s:7: TEXT _rt0_amd64_plan9(SB),NOSPLIT,$24
runtime/rt0_plan9_amd64.s:17: DATA runtime·isplan9(SB)/4, $1
runtime/rt0_plan9_amd64.s:18: GLOBL runtime·isplan9(SB), NOPTR, $4
runtime/runtime1.go:56: 	isplan9   int32
runtime/runtime2.go:342: 	//#ifdef GOOS_plan9
runtime/runtime_unix_test.go:9: // +build darwin dragonfly freebsd linux netbsd openbsd plan9
runtime/signal_plan9.go:14: // There are _SIG constants in os2_plan9.go for the table index of some
runtime/signal_plan9.go:18: // and also update the constant values is os2_plan9.go.
runtime/sigqueue.go:27: // +build !plan9
runtime/stack2.go:62: 	_StackSystem = goos_windows*512*ptrSize + goos_plan9*512 + goos_darwin*goarch_arm*1024
runtime/stubs2.go:5: // +build !plan9
runtime/sys_plan9_386.s:78: TEXT runtime·plan9_semacquire(SB),NOSPLIT,$0
runtime/sys_plan9_386.s:84: TEXT runtime·plan9_tsemacquire(SB),NOSPLIT,$0
runtime/sys_plan9_386.s:130: TEXT runtime·plan9_semrelease(SB),NOSPLIT,$0
runtime/sys_plan9_386.s:142: TEXT runtime·tstart_plan9(SB),NOSPLIT,$0
runtime/sys_plan9_386.s:223: #define ERRMAX 128	/* from os_plan9.h */
runtime/sys_plan9_386.s:236: // See ../syscall/asm_plan9_386.s:/·Syscall/
runtime/sys_plan9_amd64.s:77: TEXT runtime·plan9_semacquire(SB),NOSPLIT,$0
runtime/sys_plan9_amd64.s:83: TEXT runtime·plan9_tsemacquire(SB),NOSPLIT,$0
runtime/sys_plan9_amd64.s:127: TEXT runtime·plan9_semrelease(SB),NOSPLIT,$0
runtime/sys_plan9_amd64.s:139: TEXT runtime·tstart_plan9(SB),NOSPLIT,$0
runtime/sys_plan9_amd64.s:228: #define ERRMAX 128	/* from os_plan9.h */
runtime/sys_plan9_amd64.s:241: // See ../syscall/asm_plan9_amd64.s:/·Syscall/
runtime/zgoos_android.go:15: const goos_plan9 = 0
runtime/zgoos_darwin.go:15: const goos_plan9 = 0
runtime/zgoos_dragonfly.go:15: const goos_plan9 = 0
runtime/zgoos_freebsd.go:15: const goos_plan9 = 0
runtime/zgoos_linux.go:17: const goos_plan9 = 0
runtime/zgoos_nacl.go:15: const goos_plan9 = 0
runtime/zgoos_netbsd.go:15: const goos_plan9 = 0
runtime/zgoos_openbsd.go:15: const goos_plan9 = 0
runtime/zgoos_plan9.go:5: const theGoos = `plan9`
runtime/zgoos_plan9.go:15: const goos_plan9 = 1
runtime/zgoos_solaris.go:15: const goos_plan9 = 0
runtime/zgoos_windows.go:15: const goos_plan9 = 0
syscall/asm_plan9_386.s:127: #define SYS_SEEK 39	/* from zsysnum_plan9_386.go */
syscall/asm_plan9_amd64.s:126: #define SYS_SEEK 39	/* from zsysnum_plan9_amd64.go */
syscall/mkall.sh:258: plan9_386)
syscall/mkall.sh:260: 	mksyscall="./mksyscall.pl -l32 -plan9"
syscall/mkall.sh:261: 	mksysnum="./mksysnum_plan9.sh /n/sources/plan9/sys/src/libc/9syscall/sys.h"
syscall/mksyscall.pl:27: my $plan9 = 0;
syscall/mksyscall.pl:41: if($ARGV[0] eq "-plan9") {
syscall/mksyscall.pl:42: 	$plan9 = 1;
syscall/mksyscall.pl:247: 		if($name eq "err" && !$plan9) {
syscall/mksyscall.pl:251: 		} elsif($name eq "err" && $plan9) {
syscall/mksyscall.pl:275: 		if($reg ne "e1" || $plan9) {
syscall/mksyscall.pl:289: 	if ($plan9 && $ret[2] eq "e1") {
syscall/mksysnum_plan9.sh:8: COMMAND="mksysnum_plan9.sh $@"
syscall/zsyscall_plan9_386.go:1: // mksyscall.pl -l32 -plan9 syscall_plan9.go
syscall/zsyscall_plan9_386.go:4: // +build 386,plan9
syscall/zsyscall_plan9_amd64.go:1: // mksyscall.pl -l32 -plan9 syscall_plan9.go
syscall/zsyscall_plan9_amd64.go:4: // +build amd64,plan9
syscall/zsysnum_plan9.go:1: // mksysnum_plan9.sh /media/sys/src/libc/9syscall/sys.h
time/sys_plan9.go:5: // +build plan9
cmd/internal/rsc.io/x86/x86asm/testdat: No such file or directory
testdat: exit 1
